
CLEAN UP DOC

--------------------

- the close_handles(driver) function needs to handle closing at the context
  level, not the handle level.  If drivers cache contexts, then it's possible
  the user could uload the driver below it before uloading the caching driver.
  when the caching driver goes to close the cached handles, the results will
  be undefined.
- extension code needs to reference count callbacks to prevent modules from
  being unloaded.  there is no way for the user to protect itself from this.
  this ref count does not need to block module deactivation, only the dlclose()
  probably also need a register_oneshot wrapper function that can do this.
  -- for now, extensions are just never unloaded.
- driver load func cant use var args. need a special load for that
- driver init interface needs to have a 'command' which is zero by default
- need set_accepted() for user api
- add init accepted to set_server (or, just pass an 'accepted' flag to open)
- change 'link' to 'accepted'

in_register looks like it needs to be a counter and inc/decr under locks.
-- probably not high priority as very few drivers even finish in_register let
alone in a way that would cause a problem

repass should oneshot if in register (and it should set in register itself)

make sure test suite deals with close correctly (on failed opens)

add 'no cancel' to the close attr

need a kickout utility for drivers so their driver specific cntls can respect callback space

driver op cancel needs to remember who canceled it so the flag can be reset when it returns to that driver.

also, if something like target init or server accept fails somewhere along the way, the success targets need to be destroyed (same for attr, etc)

6) add globus_assert(result != success || prev_res == success)

-- take ref on driver handle to enable close barrier (http driver could use
   this while writing eof
-- something to do with target destroy

should pass close respect cancel?  definitely not when TOP LEVEL op is open

caching needs to be finished

dont do unnecessary error_get/puts

reexamine build process
load needs overhaul to prevent dangling drivers

documentation
