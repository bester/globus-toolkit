/******-*- C -*-**************************************************************
globus_common.h.in

Description:
  Headers common to all of Globus

CVS Information:

  $Source$
  $Date$
  $Revision$
  $State$
  $Author$
******************************************************************************/

#if !defined(GLOBUS_INCLUDE_GLOBUS_COMMON_H)
#ifndef SWIG
#define GLOBUS_INCLUDE_GLOBUS_COMMON_H 1

#ifndef EXTERN_C_BEGIN
#    ifdef __cplusplus
#        define EXTERN_C_BEGIN extern "C" {
#        define EXTERN_C_END }
#    else
#        define EXTERN_C_BEGIN
#        define EXTERN_C_END
#    endif
#endif

EXTERN_C_BEGIN

/* endif SWIG */
#endif
/******************************************************************************
			       Type definitions
******************************************************************************/

typedef unsigned char	     globus_byte_t;
typedef int		     globus_bool_t;

#ifndef SWIG

EXTERN_C_END
/******************************************************************************
		      Include globus_common header files
******************************************************************************/
#include "globus_config.h"

#ifndef GLOBUS_USE_SOLARIS_THREADS
#undef GLOBUS_USE_SOLARIS_THREADS
#endif
#ifndef GLOBUS_USE_PTHREADS
#undef GLOBUS_USE_PTHREADS
#endif
#ifndef GLOBUS_USE_SPROC
#undef GLOBUS_USE_SPROC
#endif
#ifndef GLOBUS_USE_NO_THREADS
#undef GLOBUS_USE_NO_THREADS
#endif
#ifndef GLOBUS_USE_EXTERNAL_THREADS
#undef GLOBUS_USE_EXTERNAL_THREADS
#endif
#ifndef GLOBUS_GLOBUS_TIMESPEC_EXISTS
#undef GLOBUS_GLOBUS_TIMESPEC_EXISTS
#endif
#ifndef HAVE_DIRENT_H
#undef HAVE_DIRENT_H
#endif
#ifndef HAVE_FCNTL_H
#undef HAVE_FCNTL_H
#endif
#ifndef HAVE_MEMMOVE
#undef HAVE_MEMMOVE
#endif

#ifndef HAVE_NETDB_H
#undef HAVE_NETDB_H
#endif

#ifndef HAVE_STDARG_H
#undef  HAVE_STDARG_H
#endif

#ifndef HAVE_STRUCT_IOVEC
#undef HAVE_STRUCT_IOVEC
#endif

#ifndef HAVE_SYS_SIGNAL_H
#undef HAVE_SYS_SIGNAL_H
#endif

#ifndef HAVE_SYS_TYPES_H
#undef HAVE_SYS_TYPES_H
#endif

#ifndef HAVE_SYS_UIO_H
#undef HAVE_SYS_UIO_H
#endif

#ifndef HAVE_UNISTD_H
#undef HAVE_UNISTD_H
#endif

#ifndef HAVE_WRITEV
#undef HAVE_WRITEV
#endif

/* Define as the return type of signal handlers (int or void).  */
#ifndef RETSIGTYPE
#undef RETSIGTYPE
#endif

#ifndef MAXPATHLEN
#undef MAXPATHLEN
#endif

#ifndef IOV_MAX
#undef IOV_MAX
#endif

#ifndef TIME_WITH_SYS_TIME
#undef TIME_WITH_SYS_TIME
#endif

#ifndef USE_MACROS
#undef USE_MACROS
#endif

#ifndef HAVE_SYS_FILE_H
#undef HAVE_SYS_FILE_H
#endif

/* Number of bits in a file offset, on hosts where this is settable. */
#ifndef _FILE_OFFSET_BITS
#undef _FILE_OFFSET_BITS
#endif

/* Define to make fseeko etc. visible, on some hosts. */
#ifndef _LARGEFILE_SOURCE 
#undef _LARGEFILE_SOURCE 
#endif

/* Define for large files, on AIX-style hosts. */
#ifndef _LARGE_FILES
#undef _LARGE_FILES
#endif

#ifndef GLOBUS_OFF_T
#undef GLOBUS_OFF_T
#endif

#ifndef GLOBUS_OFF_T_FORMAT
#undef GLOBUS_OFF_T_FORMAT
#endif

typedef GLOBUS_OFF_T globus_off_t;

#include "globus_release.h"
#include "globus_module.h"
#include "globus_url.h"
#include "globus_list.h"
#include "globus_hashtable.h"
#include "globus_fifo.h"
#include "globus_cfifo.h"
#include "globus_symboltable.h"
#include "globus_object.h"
#include "globus_object_hierarchy.h"
#include "globus_error.h"
#include "globus_error_hierarchy.h"
#include "globus_error_generic.h"
#include "globus_error_errno.h"

#ifdef GLOBUS_USE_PTHREADS
#include "globus_thread_pthreads.h"
#endif

#ifdef GLOBUS_USE_SOLARIS_THREADS
#include "globus_thread_solaristhreads.h"
#endif

#ifdef GLOBUS_USE_EXTERNAL_THREADS
#include "globus_thread_external.h"
#endif

#ifdef GLOBUS_USE_SPROC
#include "globus_thread_sproc.h"
#endif

#ifdef GLOBUS_USE_NO_THREADS
#include "globus_thread_none.h"
#endif

#include "globus_time.h"
#include "globus_thread_pool.h"
#include "globus_handle_table.h"
#include "globus_callback.h"
#include "globus_memory.h"
#include "globus_print.h"
#include "globus_tilde_expand.h"
#include "globus_libc.h"
#include "globus_priority_q.h"
#include "globus_debug.h"
#include "globus_args.h"
#include "globus_strptime.h"
#include "globus_thread_common.h" 
#include "globus_thread_rw_mutex.h"

#ifndef HAVE_ALLOCA_H
#undef HAVE_ALLOCA_H
#endif

# if !defined(alloca)
/* AIX requires this to be the first thing in the file.  */
#ifdef __GNUC__
# define alloca __builtin_alloca
#else
# if HAVE_ALLOCA_H
#  include <alloca.h>
# else
#  ifdef _AIX
#pragma alloca
#  else
#   ifndef alloca /* predefined by HP cc +Olibcalls */
#     ifndef _CRAYT3E
char *alloca ();
#     endif
#   endif
#  endif
# endif
#endif
#endif

#if !defined(MAXPATHLEN) 
#   include <sys/param.h>
#   define MAXPATHLEN PATH_MAX
#endif
EXTERN_C_BEGIN
/* endif SWIG */
#endif

/* most network-related functions (getpeername, getsockname,...) have
   an int* as argument, except AIX which uses size_t*. This will
   masquerade the difference. */
#if defined(TARGET_ARCH_AIX)
#define globus_netlen_t size_t
#else
#define globus_netlen_t int
#endif

/*
 * globus_barrier_t
 *
 * A generic barrier structure */
typedef struct globus_barrier_s
{
    globus_mutex_t      mutex;
    globus_cond_t       cond;
    int                 count;
} globus_barrier_t;

/******************************************************************************
			       Define constants
******************************************************************************/

/* now defined in globus_error.h: #define GLOBUS_SUCCESS  0 */

#define GLOBUS_TRUE	1
#define GLOBUS_FALSE	0

#define GLOBUS_NULL	0

#define GLOBUS_FAILURE  1

#ifndef SWIG
/******************************************************************************
				 Define macros
******************************************************************************/

/*
 * Various macro definitions for assertion checking
 */

#if 0
void globus_dump_stack();
#define GLOBUS_DUMP_STACK() globus_dump_stack()
#else
#define GLOBUS_DUMP_STACK()
#endif

#if defined(BUILD_DEBUG)
#   define globus_assert(assertion)					\
    do {								\
        if (!(assertion))						\
        {								\
            fprintf(stderr, "Assertion " #assertion			\
		    " failed in file %s at line %d\n",			\
		    __FILE__, __LINE__);				\
	                                                \
	    GLOBUS_DUMP_STACK(); \
	    abort();							\
         }								\
    } while(0)

#   define globus_assert_string(assertion, string)			\
    do {								\
    	if (!(assertion))						\
    	{								\
    	    fprintf(stderr, "Assertion " #assertion			\
		    " failed in file %s at line %d: %s",		\
		    __FILE__, __LINE__, string);			\
		GLOBUS_DUMP_STACK(); \
	    abort();							\
    	}								\
    } while(0)
#else /* BUILD_DEBUG */
#   define globus_assert(assertion)
#   define globus_assert_string(assertion, string)
#endif /* BUILD_DEBUG */

#define GLOBUS_MAX(V1,V2) (((V1) > (V2)) ? (V1) : (V2))
#define GLOBUS_MIN(V1,V2) (((V1) < (V2)) ? (V1) : (V2))

 
/******************************************************************************
			  Module activation structure
******************************************************************************/
extern globus_module_descriptor_t	globus_i_common_module;

#define GLOBUS_COMMON_MODULE (&globus_i_common_module)


/******************************************************************************
		   Install path discovery functions
******************************************************************************/

globus_result_t
globus_location (  char **   bufp );

/* returns value of GLOBUS_LOCATION in the deploy dir config file */
globus_result_t
globus_common_get_attribute_from_config_file( char *   deploy_path,
					      char *   file_location,
					      char *   attribute,
					      char **  value );

/* endif SWIG */
#endif
 
EXTERN_C_END
#endif /* GLOBUS_INCLUDE_GLOBUS_COMMON_H */
