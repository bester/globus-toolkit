#!/bin/sh
#
# globus-cert-info
#
# Easily extract information from a user's cert.
#

if test -z "${GLOBUS_LOCATION}"; then
    echo ""
    echo "ERROR: Please set GLOBUS_LOCATION to the Globus installation directory before"
    echo "running this script"
    echo ""
    exit 1
fi

. ${GLOBUS_LOCATION}/libexec/globus-script-initializer
globus_source ${GLOBUS_LOCATION}/libexec/globus-sh-tools.sh

PROGRAM_NAME=`echo $0 | ${GLOBUS_SH_SED-sed} 's|.*/||g'`

PROGRAM_VERSION=`echo '$Revision$'| ${GLOBUS_SH_SED-sed} -e 's|\\$||g' -e 's|Revision: \(.*\)|\1|'`

VERSION="@VERSION@"

PACKAGE="@PACKAGE@"

DIRT_TIMESTAMP="@DIRT_TIMESTAMP@"
DIRT_BRANCH_ID="@DIRT_BRANCH_ID@"

short_usage="$PROGRAM_NAME [-help] [-file certfile] [-all] [-subject] [...]"

long_usage () {
    ${GLOBUS_SH_CAT-cat} >&2 <<EOF

${short_usage}

    Displays certificate information. Unless the optional -file
    argument is given, the default location of the file containing the
    certficate is assumed:

      -- The location pointed to by the $X509_USER_CERT.
      -- If X509_USER_CERT not set, $HOME/.globus/usercert.pem.

    Several options can be given: The output of
        "grid-cert-info -subject -issuer"
    is equivalent to that of
        "grid-cert-info -subject ; grid-cert-info -issuer"

    Options
      -help, -usage                Display usage
      -version                     Display version
      -file certfile     |-f       Use 'certfile' at non-default location

    Options determining what to print from certificate

      -all                        Whole certificate
      -subject           |-s      Subject string of the cert
      -organization      |-o      O  of the subject
      -organizationunit  |-ou     OU of the subject
      -organizationunit2 |-ou2    2nd OU of subject (if applicable)
      -commonname        |-cn     CN of the subject
      -issuer            |-i      Issuer
      -startdate         |-sd     Validity of cert: start date
      -enddate           |-ed     Validity of cert: end date

EOF
}

globus_source $libexecdir/globus-args-parser-header $@


#SSL related needs
PATH=${GLOBUS_LOCATION}/bin:${PATH}
SSL_EXEC="${GLOBUS_LOCATION}/bin/openssl"
	

# DEFault Generated Files
DEF_GLOBUS_DIR="${HOME}/.globus"
DEF_CERT_FILE="${DEF_GLOBUS_DIR}/usercert.pem"

toprint=""

# set default location of certificate (may be overridden by --file)
#
certfile=${DEF_CERT_FILE}
if [ -n "$X509_USER_CERT" ]; then
   certfile=${X509_USER_CERT}
fi


while [ "X$1" != "X" ]; do
    case $1 in
    -file| -f)
	if [ -n "$2" -a -f "$2" -a -r "$2" ]; then
	    certfile=$2
	else
	    globus_args_option_error "$1" "\"$2\" is not a valid filename"
	fi
	shift
	;;
    -all)
	toprint="$toprint -text"
	;;
    -subject|-s)
	toprint="$toprint SUBJECT"
	;;
    -organization|-o)
	toprint="$toprint O2"
	;;
    -organizationunit|-ou)
	toprint="$toprint OU"
	;;
    -organizationunit2|-ou2)
	toprint="$toprint OU2"
	;;
    -commonname|-cn)
	toprint="$toprint CN"
	;;
    -issuer|-i)
	toprint="$toprint -issuer"
	;;
    -startdate|-sd)
	toprint="$toprint -startdate"
	;;
    -enddate|-ed)
	toprint="$toprint -enddate"
	;;
    *)
	globus_args_unrecognized_option "$1"
	;;
    esac
    shift
done

if [ "X$toprint" = "X" ]; then
    toprint="-text"
fi

if [ ! \( -f "${certfile}" -a -r "${certfile}" \) ]; then
    echo "ERROR: Cannot read certificate file ${certfile}" >&2
    exit 1
fi
 
command_stub="${SSL_EXEC} x509 -noout -in ${certfile}"

# Will probably need this...
subject=`eval "${command_stub}" -subject | ${GLOBUS_SH_SED-sed} 's%^subject=\ *%%'`

eval set -- "$toprint"
for i in "$@"; do
    case "$i" in
    -*)
	eval "${command_stub} $i | ${GLOBUS_SH_SED-sed} 's/^[A-z]*=[ ]*//'"
	;;
    SUBJECT)
	# Do not show the proxy levels
	echo "${subject}" | ${GLOBUS_SH_SED-sed} -e 's%/CN=proxy%%g' -e 's%/CN=limited proxy%%g'
	;;
    PROXY)
	proxy=`echo "${subject}" | ${GLOBUS_SH_AWK-awk} -F/ '{for (i=1;i<=NF;i++) printf "%s\n", $i;}' | ${GLOBUS_SH_SED-sed} -n '/^CN=.*proxy/p' | ${GLOBUS_SH_GREP-grep} -c "CN=proxy"`
	limited=`echo "${subject}" | ${GLOBUS_SH_AWK-awk} -F/ '{for (i=1;i<=NF;i++) printf "%s\n", $i;}'| ${GLOBUS_SH_SED-sed} -n '/^CN=.*proxy/p' | ${GLOBUS_SH_GREP-grep} -c "CN=limited proxy"`
	if [ "${limited}" -gt 0 ]; then
	    echo "Limited proxy, number of levels : `expr ${proxy} + ${limited}`"
	elif [ "${proxy}" -gt 0 ]; then
	    echo "Full proxy, number of levels : ${proxy}"
        else
	    echo "Not a proxy"
	fi
	;;
    O*2)
	# print second instance of O or OU.
	o=`echo $i | ${GLOBUS_SH_SED-sed} 's/2//'`
	echo "${subject}" | ${GLOBUS_SH_AWK-awk} -F/ '{for (i=1;i<=NF;i++) printf "%s\n", $i;}' | ${GLOBUS_SH_GREP-grep} "^${o}=" | ${GLOBUS_SH_SED-sed} -e 1d -e 's/^[A-z]*=//'
	;;
    *)
	echo "${subject}" | ${GLOBUS_SH_AWK-awk} -F/ '{for (i=1;i<=NF;i++) printf "%s\n", $i;}' | ${GLOBUS_SH_GREP-grep} "^${i}=" | ${GLOBUS_SH_SED-sed} -n -e '1s/^[A-z]*=//p'
	;;
    esac
done

