======
README		Myproxy
======

 1. Overview
 2. Target Usage Scenarios
 3. Authorization
 4. License and Support
 5. Additional Information
 6. Authors
 7. Contributors

1. Overview
-----------

Myproxy provides a server with client-side utilities to store and
retrieve delegated X509 credentials via the Grid Security
Infrastructure (GSI).  The myproxy-init program delegates a proxy
credential to the myproxy-server, which stores the proxy to disk.  The
myproxy-get-delegation program retrieves stored proxy credentials from
the myproxy-server.  The myproxy-destroy program removes credentials
stored on a myproxy-server.

The myproxy-init, myproxy-get-delegation, and myproxy-destroy programs
always verify the identity of the myproxy-server using the GSI before
proceeding.  By default, the myproxy-server is expected to have a
distinguished name of the form "host/<fqhn>".  Set the
MYPROXY_SERVER_DN environment variable to override this.

Proxy credentials are stored unencrypted by the myproxy-server.  It
should be run on a well-secured host.  The myproxy-server verifies
that clients are authorized to store, retrieve, and remove credentials
using GSI and passphrase authentication, according to rules defined in
the server configuration file.

2. Target Usage Scenarios
------------------

The myproxy server can support three different credential retrieval
scenarios.  The default myproxy server configuration file supports
only the first scenario.  Myproxy administrators should consider the
security implications of each scenario and decide which scenarios to
support in their server.

In the first scenario, a user gives the myproxy passphrase for a
stored credential to a trusted service, such as a web portal.  Then,
that service authenticates to the myproxy server with its service
credential and the user's passphrase to retrieve a proxy credential
for the user.  The trusted service must match one of the
authorized_retrievers lines in the myproxy server configuration file.

In the second scenario, a user retrieves a previously stored
credential from the myproxy server, authenticating with the passphrase
previously associated with the credential.  The user authenticates to
the myproxy server with an "anonymous" X.509 identity, since he or she
doesn't have an X.509 credential to start with.  The myproxy server
configuration file must allow "anonymous" as a valid
authorized_retriever to support this.

In the third scenario, a user delegates a proxy credential to a
trusted service, such as a batch scheduler, and that service uses
myproxy to renew the user's proxy credential as needed (for example,
until the user's jobs complete).  The service authenticates to the
myproxy server with its service credential and then performs a second
authentication using the user's proxy credential to retrieve a new
proxy credential for the user.

3. Authorization
----------------------

The myproxy-server allows both the server administrator and users who
upload credentials to control who is authorized to retrieve the
credentials.  The server administrator sets a server-wide policy that
specifies which authenticated identities (Distinguished Names) are
allowed to upload, retrieve, and renew credentials using the
accepted_credentials, authorized_retrievers, and authorized_renewers
statements in the myproxy-server configuration file.  Users can not
override these server-wide policies, so they must be permissive enough
to allow the myproxy-server to be used as required at the site.

Policy expressions are also associated with each credential, to
control which authenticated identities may retrieve or renew that
specific credential.  The server administrator specifies a default
policy that is applied if the user doesn't specify one when uploading
the credential, using the default_retrievers and default_renewers
statements in the myproxy-server configuration file.  The intention is
that the server administrator will set restrictive default
per-credential policies and more permissive server-wide policies, to
allow users to override the restrictive per-credential policies as
needed.

Users can specify the policies for credential retrieval and renewal
using arguments to myproxy-init.  This allows the user to set an
appropriate policy when uploading a credential for a specific
purpose.  For example, when uploading a credential to use with a
specific web portal, the user can authorize only that specific web
portal to retrieve the credential, and then use myproxy-destroy to
remove the credential when finished using that portal.

Examples:

  1. Upload a credential for use with the Alliance User Portal:

       myproxy-init -r "portal/aup.ncsa.uiuc.edu"

  2. Upload a credential for retrieval with just a username/passphrase
     (so-called "anonymous" retrieval):

       myproxy-init -a

  3. Upload a credential for renewal by Condor-G on
     hn01.ncsa.uiuc.edu:

       myproxy-init -R "condorg/hn01.ncsa.uiuc.edu"

The ability to set per-credential policies makes it more attractive to
upload different credentials for different purposes.  Currently, the
support for this is limited but it is an area we plan to work on.  The
best approach right now is to use different usernames for the
different credentials, like "jbasney-portal1", "jbasney-portal2",
"jbasney-renewable", etc.  Use the -l option with myproxy-init to set
the username.

4. License and Support
----------------------

Myproxy is Copyright 2000-2001 The Board of Trustees of the University
of Illinois.

See the file 'LICENSE' for detailed license information.

Myproxy is unsupported software, use at your own risk. No warranty
implied.

You are encouraged to join the myproxy-users@ncsa.uiuc.edu discussion
list and to send bug reports and enhancements to that list.  To
subscribe, send email to majordomo@ncsa.uiuc.edu with 
"subscribe myproxy-users" in the body of the message.

5. Additional Information
-------------------------

Please see myproxy-programs.html for running the various myproxy
programs and command line arguments.

Please see INSTALL for directions on compiling and installing myproxy.

Please see VERSION for information about this and other versions of
the myproxy software.

Information on GSI and Globus can be found at:
http://www.globus.org/security/v1.1 
http://www.globus.org.

Java versions of the myproxy clients are available as part of Java CoG
Kit distribution which is available at:

http://www.globus.org/cog/

6. Authors
----------
Jason Novotny <jdnovotny@lbl.gov>
Von Welch <welch@mcs.anl.gov>
Jim Basney <jbasney@ncsa.uiuc.edu>

7. Contributors
---------------
Jarek Gawor <gawor@mcs.anl.gov>
Benjamin Temko <btemko@extreme.indiana.edu>
Daniel Kouril <kouril@ics.muni.cz>
Miroslav Ruda <ruda@ics.muni.cz>
Shiva Shankar Chetan <chetan@ncsa.uiuc.edu>
