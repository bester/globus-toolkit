This is the current list of things outstanding for the 4.0 release.
** denotes must happen before feature freeze
XX denotes unlikely that this will be in 4.0

auth:
XX authz instrumentation

protocol:
-- correct FEAT response?
-- reply codes - verify.
-- disable perf markers in mode S (if we must)
** define reply errors properly for going over ipc

signal handling:
-- SIGINT needs to handle data-node shutdown

striping:
-- verify eofc handling, should move out of remote into data.c
-- verify _get_read_range()
    
ipc:
XX connect backwards

logging:
-- instrument code
-- verify output format
-- specify log format by configuration
-- configuration to choose logging module
-- syslog module for globus_logging
-- produce netlogger output based on perf marker info ( -Z option in wu )

general:
-- verify on 64bit machines (after void * changes)
-- instrument any remaining configuration options and limits

threads:
-- quick test that stuff works -- not really looking for 100% right now
-- walk through locks

cleanup:
-- verify test suite
-- clean majority of memory leaks

-----------------------------------------------------------------------
known bugs:
-- op used in data_session_start isn't freed
-- there's no way to tell the difference between a NULL string and an empty
    string ("") over the ipc since they are encoded the same. DecodeString
    was always decoding them as "", but I don't think we send "" purposely, 
    and I know we rely on some values being NULL, so I changed DecodeString
    to decode it as a NULL pointer.  This still needs to be fixed.


DONE
    fix MLST response code to 250, if easy enough pathname 
    in mlst should be the same that was requested
** add symlink_target to stat buffer, server-lib stuff to display it in mlsx
** dynamic adjust recieving server parallelism
    query data channel for number of streams, use that as reply to 
    _get_optimal_concurrency
-- password file / plaintext password authentication
** file trunc issue
    send first _ipc_request_recv() with trunc set, wait for BEGIN,
    then send the rest with no trunc.  
** use handle_tables for psuedo-passing void *
** encryption/security
** configuration of layout/buffer sizes/1-1,ALL-ALL, etc
** load dsi speficied in module_name on ERET/ESTO 
-- sync() before each transfer stat update (by option)
-- added ipc connect timeout and idle timeout (removes from cache)

-- on zero byte sends, file module calls begin, and immediately calls finished 
with success.  this results in server sending 226 and never 150 since the
begin_cb hasn't happened yet.  need to delay the transfer finished until
after the transfer_connected.  (the client lib seems to handle this fine,
but it causes problems when trying a striped transfer of 0 bytes). 
