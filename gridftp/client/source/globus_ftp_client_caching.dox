#ifndef GLOBUS_DONT_DOCUMENT_INTERNAL

/**
@page globus_ftp_client_caching_implementation Connection Caching in the Globus FTP Client Library

The Globus FTP Client Library (henceforth, the client library) implements
connection caching as a way to improve performance when many files are being
transferred between ftp servers. There are two types of caching done by the
client library: control channel caching, and data channel caching. Data channel
caching is only available in servers which implement the GridFTP protocol, and
only when the data transfer is done in extended block mode.

<h2>Control Channel Caching Interface</h2>
The first type of caching done is the control channel caching.  There are three
sets of functions related to the management of caching behavior in the client
library which a programmer can use. These are
- globus_ftp_client_handle_cache_url_state() and
  globus_ftp_client_handle_flush_url_state()
- globus_ftp_client_handleattr_set_cache_all() and
  globus_ftp_client_handleattr_get_cache_all()
- globus_ftp_client_handleattr_add_cached_url() and
  globus_ftp_client_handleattr_remove_cached_url()

The first pair tells the client library to create or remove a cache entry in
the handle. When a cache entry is created, no connection is made to the URL.
Upon completion of a subsequent FTP operation done using the server which is
cached, the client library will not close the connection, but store it in
it's cache.  This function can only be called on a handle which has been
initialized. This was the original interface to connection caching in the
client library; the other modes were added later in development.

The second pair tells the client library deals with the "cache_all" handle
attribute. This attribute tells the client to cache a connection to every
server which it connects to. The implementation currently caches only one
connection to any particular server per handle; this generally does not
impact performance because only one operation may be active on a
handle at once, so it is infrequent that more than one cached connection
would be used. This function can only be called on handle attribute, and is
only effective on a handle if this is done before initializing the handle with
the attribute.

The third pair tells the client library to modify the list of urls to cache
on an attribute. This provides similar functionality to the first set of
caching functions, but is done before a handle is initialized, so that multiple
handles may be created with the same caching list. The same restriction
of one cached connection per server as in the previous pair of functions
applies to this attribute.

<h2>Control Channel Caching Implementation</h2>

In the client library implementation, information about control connections is
encapsulated in the globus_i_ftp_client_target_t. This structure contains
the @ref globus_ftp_control_handle_t "control handle" associated with the
connection, as well as various state information about the connection.

A target can be linked into a control handle in one of two ways. It is either
part of the current transfer, in which case either the handle's source or
dest pointers point to it, or it is cached, in which case it will be wrapped
in a @ref globus_i_ftp_client_cache_entry_t "cache entry" in the url_cache
list.

When a new operation begins, the client library calls the internal
function globus_i_ftp_client_target_find(), which will either pull an existing
target out of the handle's cache, or create a new one. Additionally, if the
cache_all attribute is set on the handle and no cache entry exists for the
given URL, a new cache entry will be created.
If globus_i_ftp_client_target_find() returns a new target
(target->state == GLOBUS_FTP_CLIENT_TARGET_START),
it will be connected to the URL server, otherwise (target->state ==
GLOBUS_FTP_CLIENT_TARGET_SETUP_CONNECTION) a NOOP message will be sent
to verify the connection is still valid. If the NOOP fails or returns a
negative response, a new target is created (again calling
globus_i_ftp_client_target_find()) and a new connection is started.

<em>Note: I'm not positive that the case where NOOP fails has been tested very much</em>

When an operation completes, globus_i_ftp_client_target_release() is called
with each target. If the operation completed without invalidating the target
(no protocol failure occurred) and there is an empty cache entry for the URL,
then the target will be placed in the GLOBUS_FTP_CLIENT_TARGET_SETUP_CONNECTION
state and inserted into the handle's url cache. If there is no empty cache
entry, then the target will be closed by calling globus_ftp_control_quit()
and eventually freed.

<h2>Data Channel Caching Interface</h2>

There aren't any data channel caching function calls in the Globus FTP Client 
API. Data channel caching is done automatically when extended block mode is
in use and control channel caching is being used, and other restrictions
are met. The programmer does not have the fine-grained control over
data channel caching that he does over control channel caching.

<h2>Data Channel Caching Implementation</h2>

Because data channels are not explicitly exposed by the control library to
the client library, the client library needs to keep track of what connections
it thinks it has open, so that it can decide when it is possible to skip the
PASV/PORT or SPAS/SPOR parts of the control connection protocol and reuse
data connections. This is done by keeping a globus_i_ftp_client_data_target_t
in each globus_i_ftp_client_target_t structure which is used. The data target
may either be all NULL pointers, in the case that no data connection has been
made, or it contains information which is used while processing a connection to
decide whether data connection caching is appropriate. The target contains
pointers to the source and destination targets of the operation (either one of
these may be NULL, depending on the operation), and the last operation that the
data channel was used for.

As the client state machine progresses, certain FTP protocol messages will
cause the data target to be NULLed out. These include changing the mode,
the data channel authentication mode, protection buffer size, data protection
mode, or processing a PASV message. Note that in a 3rd party transfer, changing
one of these parameters requires that the peer of the transfer to also be
updated to not reuse the data connection.

When a data connection can be cached (the
globus_l_ftp_client_can_cache_data_connection() predicate only exists because
of the transition time when we hadn't fully implemented the data connection
caching support on the servers), the information on the transfer being done
is stored in the data target. Then subsequent transfers may skip
the PASV/PORT and SPAS/SPOR parts of the control protocol and reuse the data
connection. (Note that globus_ftp_control_data_connect_read() must be called
before each data movement operation.)

Even if a data connection is cached to a server, or between servers in a 3rd
party transfer, the data connection may not always be reused. This is because
the data channels in extended block mode are unidirectional. Because of this,
the state machine handler calls the globus_i_ftp_client_can_reuse_data_conn()
before decided whether to skip the data connection negotiation part of the
control protocol.
*/
#endif
