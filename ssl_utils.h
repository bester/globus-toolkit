/*
 * ssl_utils.h
 *
 * Functions for interacting with SSL, X509, etc.
 */
#ifndef _SSL_UTILS_H
#define _SSL_UTILS_H

struct _ssl_credentials;
typedef struct _ssl_credentials SSL_CREDENTIALS;

struct _ssl_proxy_restrictions;
typedef struct _ssl_proxy_restrictions SSL_PROXY_RESTRICTIONS;

/*
 * ssl_credentials_destroy()
 *
 * Destroys the given credentials, deallocating all memory
 * associated with them.
 */
void ssl_credentials_destroy(SSL_CREDENTIALS *creds);


/*
 * ssl_certificate_load_from_file()
 *
 * Load a certificate from the given file into the given set of
 * credentials. Any existing certificate will be erased.
 *
 * Returns 0 on success, -1 on error setting verror.
 */
int ssl_certificate_load_from_file(SSL_CREDENTIALS	*creds,
				   const char		*path);

/*
 * ssl_load_private_key()
 *
 * Load a key from the given file, using pass_phrase if needed,
 * and storing it in the given credentials structure. pass_phrase
 * may be null. Any existing key will be erased.
 *
 * Returns 0 on success, -1 on error.
 */
int ssl_private_key_load_from_file(SSL_CREDENTIALS	*creds,
				   const char		*path,
				   const char		*pass_phrase);

/*
 * ssl_proxy_load_from_file()
 *
 * Load a proxy certificate and key from the given file, using pass_phrase
 * if needed, and storing the credentials in the given SSL_CREDENTIALS
 * structure. pass_phrase may be NULL. Any existing credentials in
 * the SSL_CREDENTIALS structure will be erased.
 *
 * Returns 0 on success, -1 on error.
 */
int ssl_proxy_load_from_file(SSL_CREDENTIALS		*creds,
			     const char			*path,
			     const char			*pass_phrase);

/*
 * ssl_new_credentials()
 *
 * Return a empty credentials structure for use.
 *
 * Returns NULL on error.
 */
SSL_CREDENTIALS *ssl_credentials_new();

/*
 *
 * ssl_proxy_buffer_init()
 *
 * Generate a request for a proxy in a buffer suitable for
 * shipping over the network.
 *
 * pcreds will be filled in with the private key and should be
 * passed to ssl_accept_proxy() to be filled in with the
 * returned certificate.
 *
 * buffer will be set to point at an allocated buffer containing
 * data to be passed to the signer to be passed into
 * ssl_sign_proxy_request().
 *
 * buffer_length will be filled in with the length of buffer.
 *
 * requested_bits will be used as the key length for the
 * new proxy. If 0 then the length of user_certificate key
 * will be used.
 *
 * callback can point to a function that will be called
 * during key generation - see SSLeay's doc/rsa.doc
 * RSA_generate_key() function for details.
 *
 * Returns 0 on success, -1 on error.
 */
int ssl_proxy_buffer_init(SSL_CREDENTIALS	**new_creds,
			  unsigned char		**buffer,
			  int			*buffer_length,
			  int			requested_bits,
			  void			(*callback)(int,int,char *));


/*
 * ssl_proxy_buffer_finalize()
 *
 * Finalize the process of getting a proxy certificate using
 * buffers in a form suitable for shipping over the network.
 *
 * creds should be the credentials originally obtained from
 * ssl_proxy_request_init()
 *
 * buffer should be the buffer generated by ssl_proxy_request_sign().
 *
 * buffer_len should be the length of buffer.
 */
int ssl_proxy_buffer_finalize(SSL_CREDENTIALS	*creds,
			      unsigned char	*buffer,
			      int		buffer_length);

/*
 * ssl_proxy_buffer_sign()
 *
 * Sign a proxy request and generate a proxy certificate.
 * Input and output are buffers suitable for shipping over
 * the network.
 *
 * creds contains the credentials used the sign the request.
 *
 * restrictions contains any restrictions to be placed on the
 * proxy. May be NULL in which case defaults are used.
 *
 * request_buffer contains the buffer as generated by
 * ssl_generate_proxy_request().
 *
 * request_buffer_len contains the length of request_buffer
 * in bytes.
 *
 * proxy_buffer will be filled in with a pointer to an allocated
 * buffer that contains the proxy certificate and certificate
 * chain for feeding into ssl_finish_proxy_request.
 *
 * proxy_buffer_length will be filled in to contain the length
 * of proxy_buffer.
 *
 * Returns 0 on success, -1 on error.
 */
int ssl_proxy_buffer_sign(SSL_CREDENTIALS		*creds,
			  SSL_PROXY_RESTRICTIONS	*restrictions,
			  unsigned char			*request_buffer,
			  int				request_buffer_length,
			  unsigned char			**proxy_buffer,
			  int				*proxy_buffer_length);

			   
#endif /* _SSL_UTILS_H */
