#!/usr/bin/perl -w

# myproxy admin adduser script
# generates a certificate request using grid-cert-request
# signs the request using grid-ca-sign
# and stores the credential in the repository using
#   myproxy-admin-load-credential

use Env;  #module to access environment variables
Env::import(); #tie environment vars to local vars with same name

# check for program dependencies

chomp($grid_cert_request = `which grid-cert-request 2>/dev/null`);
if (!(-x $grid_cert_request)) {
    print STDERR "Error: grid_cert_request not found.\n";
    exit 1;
}
chomp($grid_ca_sign = `which grid-ca-sign 2>/dev/null`);
if (!(-x $grid_ca_sign)) {
    print STDERR "Error: grid-ca-sign not found.\n";
    print STDERR "Is the Simple CA package installed?\n";
    exit 1;
}
chomp($mpalc = `which myproxy-admin-load-credential 2>/dev/null`);
if (!(-x $mpalc)) {
    print STDERR "Error: myproxy-admin-load-credential not found.\n";
    print STDERR "Is MyProxy installed in ${GLOBUS_LOCATION}?\n";
    exit 1;
}
chomp($mpauc = `which myproxy-admin-adduser-config 2>/dev/null`);
if (!(-x $mpauc)) {
    print STDERR "Error: myproxy-admin-adduser-config not found.\n";
    print STDERR "Is MyProxy installed in ${GLOBUS_LOCATION}?\n";
    exit 1;
}

# read defaults from myproxy-adduser.config file

if (!stat("${GLOBUS_LOCATION}/etc/myproxy-adduser.config")) {
    print STDERR "${GLOBUS_LOCATION}/etc/myproxy-adduser.config ";
    print STDERR "doesn't exist.\nRunning myproxy-admin-adduser-config ";
    print STDERR "to set general options.\n";
    print STDERR "----------------------------------------\n";
    if (system("${GLOBUS_LOCATION}/sbin/myproxy-admin-adduser-config")) {
	print STDERR "${GLOBUS_LOCATION}/sbin/myproxy-admin-adduser-config ";
	print STDERR "failed.\nAborting.\n";
	&cleanup();
	exit 1;
    }
    print STDERR "----------------------------------------\n";
}

unless (open(CONFIG, '<', "${GLOBUS_LOCATION}/etc/myproxy-adduser.config")) {
    print STDERR "Can't open ${GLOBUS_LOCATION}/etc/myproxy-adduser.config.\n";
    print STDERR "Aborting.\n";
    &cleanup();
    exit 1;
}

@fileinfo = stat(CONFIG);  

if (!@fileinfo) {
    print STDERR "Unable to stat config file ";
    print STDERR "${GLOBUS_LOCATION}/etc/myproxy-adduser.config.\n";
    print STDERR "Aborting.\n";
    &cleanup();
    exit 1;
}
sysread (CONFIG, $FILE_CONT, $fileinfo[7]);

# filter out comments
$flag = 0;
$xx = "";
for ($i = 0; $i < $fileinfo[7]; $i++) {
        $c  = substr ($FILE_CONT, $i, 1);
	$flag = 1 if ($c eq '#');
	$xx = $xx . $c if ($flag == 0);
	$flag = 0 if ($c eq "\n"); #reset
}
$FILE_CONT = $xx;

#search for various parameters

$tmp_dir_name = &getparam("tmp_dir_name");
$cred_store   = &getparam("cred_store");
$ret_regex    = &getparam("ret_regex");
$ren_regex    = &getparam("ren_regex");
$credname     = &getparam("credname");
$creddesc     = &getparam("creddesc");

$tmp_dir_name = "/tmp" if ($tmp_dir_name eq "");

if ($cred_store ne "") {
    $cred_store_switch = "-s";
} else {
    $cred_store_switch = "";
}

if ($ret_regex ne "") {
    $ret_regex_switch  = "-r";
} else {
    $ret_regex_switch  = "";
}

if ($ren_regex ne "") {
    $ren_regex_switch  = "-R";
} else {
    $ren_regex_switch  = "";
}

if ($ret_regex ne "" && $ren_regex ne "") {
    print STDERR "Error: Both ret_regex and ren_regex specified but a\n";
    print STDERR "credential may not be used for both retrieval and ";
    print STDERR "renewal.\n";
    &cleanup();
    exit 1;
}

if ($credname ne "") {
    $credname_switch  = "-k";
} else {
    $credname_switch  = "";
}

if ($creddesc ne "") {
    $creddesc_switch  = "-K";
} else {
    $creddesc_switch  = "";
}

#grid-cert-request

print "Enter common name for the certificate: ";
chop($common_name = <STDIN>);

$prefix="myproxy_adduser_";
$certfile = "${tmp_dir_name}/${prefix}cert.pem";
$reqfile = "${tmp_dir_name}/${prefix}cert_request.pem";
$keyfile = "${tmp_dir_name}/${prefix}key.pem";

@args = ("grid-cert-request", "-cn", $common_name, "-prefix", $prefix, "-dir",
	 $tmp_dir_name,  "-force", "-nopassphrase");

if (system (@args)) {
    print STDERR "grid-cert-request failed.\n";
    &cleanup();
    exit 1;
}

#grid-ca-sign

@args = ("grid-ca-sign", "-in", $reqfile, "-out", $certfile, "-force");

if (system (@args)) {
    print STDERR "grid-ca-sign failed.\n";
    &cleanup();
    exit 1;
}

#myproxy-alcf

print "Enter username [use DN by default]: ";
chop ($username = <STDIN>);
if (length $username > 0) {
    $username_switch = "-l";
    $dn_as_user = ""
} else {
    $username_switch = "";
    $dn_as_user = "-d";
}

$args = "myproxy-admin-load-credential $cred_store_switch $cred_store -c $certfile -y $keyfile $username_switch $username -x $ret_regex_switch $ret_regex $ren_regex_switch $ren_regex $dn_as_user $credname_switch $credname $creddesc_switch $creddesc";

if (system($args)) {
    print STDERR "myproxy-admin-load-credential failed.\n";
    &cleanup();
    exit 1;
}

&cleanup();
exit 0;

sub getparam {
    local($str) = @_;
    local($i) = index ($FILE_CONT, $str);
    $str .= "=";
    if ($i != -1) {
	local($end) = index ($FILE_CONT, "\n", $i);
	$pos = $i+length($str);
	return substr($FILE_CONT, $pos, $end-$pos);
    }
    return "";
}

sub cleanup {
    unlink($certfile) if (defined($certfile));
    unlink($reqfile) if (defined($reqfile));
    if (defined($keyfile)) {
	&wipefile($keyfile);
	unlink($keyfile);
    }
}

sub wipefile {
    local($filename) = @_;
    $size = (stat($filename))[7];
    return if (!defined($size) || !$size);
    return if (!open(WIPEFILE, '>', $filename));
    for ($i = 0; $i < $size; $i++) {
	print WIPEFILE "\0";
    }
    close(WIPEFILE);
}
