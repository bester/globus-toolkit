#!/bin/sh
set -e # exit on any error
LOGNAME=$USER
export LOGNAME
(
if test -n "${_NMI_PREREQ_openssl_0_9_8k_shared_ROOT}"; then
    PKG_CONFIG_PATH="${_NMI_PREREQ_openssl_0_9_8k_shared_ROOT}/lib/pkgconfig"
    OPENSSL_CFLAGS="-I${_NMI_PREREQ_openssl_0_9_8k_shared_ROOT}/include"
    OPENSSL_INCLUDES="-I${_NMI_PREREQ_openssl_0_9_8k_shared_ROOT}/include"
    OPENSSL_LDFLAGS="-L${_NMI_PREREQ_openssl_0_9_8k_shared_ROOT}/lib"
    OPENSSL_LIBS="-lssl -lcrypto"
    export PKG_CONFIG_PATH
    export OPENSSL_CFLAGS OPENSSL_INCLUDES OPENSSL_LDFLAGS OPENSSL_LIBS
fi
if test -n "${LD_LIBRARY_PATH}" -a -z "${LIBPATH}"; then
    LIBPATH=$LD_LIBRARY_PATH
    export LIBPATH
fi
echo ==================================================
echo Environment variables:
env
echo ==================================================
echo Directory contents:
ls -Rl
echo ==================================================
valgrind=""
if test -d /prereq/valgrind-3.5.0/bin; then
    echo /prereq/valgrind-3.5.0/bin exists
    PATH=/prereq/valgrind-3.5.0/bin:$PATH
    export PATH
    valgrind="-valgrind"
    echo valgrind-3.5.0 found.
else
    echo valgrind not found.
fi
function BuildGT
{
    export GLOBUS_LOCATION
    echo ==================================================
    echo Installing $installer to $GLOBUS_LOCATION
    tar xfz $installer
    cd gt*-installer
    ./configure --prefix=$GLOBUS_LOCATION --with-buildopts="-verbose"
    make globus_usage gsi-myproxy install
    cd ..
}
if test -z "$_NMI_TASKNAME" -o "x$_NMI_TASKNAME" = "xBuildGT408"; then
    installer="gt4.0.8-all-source-installer.tar.gz"
    GLOBUS_LOCATION=$_CONDOR_SCRATCH_DIR/gt-4.0.8
    BuildGT
fi
if test -z "$_NMI_TASKNAME" -o "x$_NMI_TASKNAME" = "xBuildGTNightly"; then
    installer="nightly.tar.gz"
    GLOBUS_LOCATION=$_CONDOR_SCRATCH_DIR/gt-nightly
    BuildGT
fi
function BuildMyProxyCVS
{
    export GLOBUS_LOCATION
    echo ==================================================
    echo Installing MyProxy CVS to $GLOBUS_LOCATION
    . $GLOBUS_LOCATION/etc/globus-user-env.sh
    echo ==================================================
    echo Environment variables:
    env
    echo ==================================================
    flavor=`gpt-query -name=myproxy | perl -n -e 'if (/myproxy-(.*)-pgm/){print "$1\n";}'|head -1`
    echo GPT flavor is $flavor.
    echo ==================================================
    echo Installing autotools...
    cd autotools
    ./install-autotools $GLOBUS_LOCATION
    echo ==================================================
    echo Building MyProxy...
    cd ../myproxy
    ./bootstrap
    ./configure --with-flavor=$flavor
    make dist
    gpt-uninstall myproxy
    rm -rf BUILD
    gpt-build -verbose myproxy-*.tar.gz $flavor
    cd ..
}
if test -z "$_NMI_TASKNAME" -o "x$_NMI_TASKNAME" = "xBuildMyProxyCVSGT408"; then
    GLOBUS_LOCATION=$_CONDOR_SCRATCH_DIR/gt-4.0.8
    BuildMyProxyCVS
fi
if test -z "$_NMI_TASKNAME" -o "x$_NMI_TASKNAME" = "xBuildMyProxyCVSGTNightly"; then
    GLOBUS_LOCATION=$_CONDOR_SCRATCH_DIR/gt-nightly
    BuildMyProxyCVS
fi
function TestMyProxyCVS
{
    . $GLOBUS_LOCATION/etc/globus-user-env.sh
    export GLOBUS_LOCATION
    echo ==================================================
    echo Testing MyProxy in $GLOBUS_LOCATION
    cd myproxy
    X509_CERT_DIR=$GLOBUS_LOCATION/share/certificates
    export X509_CERT_DIR
    mkdir $X509_CERT_DIR
    cp nmi/*.0 nmi/*.signing_policy $X509_CERT_DIR
    chmod 0600 nmi/userkey.pem
    grid-proxy-init -debug -verify -cert nmi/usercert.pem -key nmi/userkey.pem
    myproxy-test -startserver $valgrind
    myproxy-test-replicate
    cd ..
}
if test -z "$_NMI_TASKNAME" -o "x$_NMI_TASKNAME" = "xTestMyProxyCVSGT408"; then
    GLOBUS_LOCATION=$_CONDOR_SCRATCH_DIR/gt-4.0.8
    TestMyProxyCVS
fi
if test -z "$_NMI_TASKNAME" -o "x$_NMI_TASKNAME" = "xTestMyProxyCVSGTNightly"; then
    GLOBUS_LOCATION=$_CONDOR_SCRATCH_DIR/gt-nightly
    TestMyProxyCVS
fi
if test -z "$_NMI_TASKNAME" -o "x$_NMI_TASKNAME" = "xValgrindCheck"; then
    cat myproxy/valgrind.log.* 1> valgrind.log 2>/dev/null || true
    if test -s valgrind.log ; then
        cat valgrind.log
        exit 1
    fi
fi
) 2>&1 # we want stdout & stderr mixed in the output file

