#!/bin/sh
set -e # exit on any error
GLOBUS_LOCATION=$_CONDOR_SCRATCH_DIR/globus
LOGNAME=$USER
export GLOBUS_LOCATION LOGNAME
(
if test -n "${_NMI_PREREQ_openssl_0_9_8k_shared_ROOT}"; then
    PKG_CONFIG_PATH="${_NMI_PREREQ_openssl_0_9_8k_shared_ROOT}/lib/pkgconfig"
    OPENSSL_CFLAGS="-I${_NMI_PREREQ_openssl_0_9_8k_shared_ROOT}/include"
    OPENSSL_INCLUDES="-I${_NMI_PREREQ_openssl_0_9_8k_shared_ROOT}/include"
    OPENSSL_LDFLAGS="-L${_NMI_PREREQ_openssl_0_9_8k_shared_ROOT}/lib"
    OPENSSL_LIBS="-lssl -lcrypto"
    export PKG_CONFIG_PATH
    export OPENSSL_CFLAGS OPENSSL_INCLUDES OPENSSL_LDFLAGS OPENSSL_LIBS
elif test -n "${_NMI_PREREQ_openssl_0_9_8e_shared_ROOT}"; then
    PKG_CONFIG_PATH="${_NMI_PREREQ_openssl_0_9_8e_shared_ROOT}/lib/pkgconfig"
    OPENSSL_CFLAGS="-I${_NMI_PREREQ_openssl_0_9_8e_shared_ROOT}/include"
    OPENSSL_INCLUDES="-I${_NMI_PREREQ_openssl_0_9_8e_shared_ROOT}/include"
    OPENSSL_LDFLAGS="-L${_NMI_PREREQ_openssl_0_9_8e_shared_ROOT}/lib"
    OPENSSL_LIBS="-lssl -lcrypto"
    export PKG_CONFIG_PATH
    export OPENSSL_CFLAGS OPENSSL_INCLUDES OPENSSL_LDFLAGS OPENSSL_LIBS
elif test -n "${_NMI_PREREQ_openssl_0_9_7_shared_ROOT}"; then
    PKG_CONFIG_PATH="${_NMI_PREREQ_openssl_0_9_7_shared_ROOT}/lib/pkgconfig"
    OPENSSL_CFLAGS="-I${_NMI_PREREQ_openssl_0_9_7_shared_ROOT}/include"
    OPENSSL_INCLUDES="-I${_NMI_PREREQ_openssl_0_9_7_shared_ROOT}/include"
    OPENSSL_LDFLAGS="-L${_NMI_PREREQ_openssl_0_9_7_shared_ROOT}/lib"
    OPENSSL_LIBS="-lssl -lcrypto"
    export PKG_CONFIG_PATH
    export OPENSSL_CFLAGS OPENSSL_INCLUDES OPENSSL_LDFLAGS OPENSSL_LIBS
fi
if test -n "${LD_LIBRARY_PATH}" -a -z "${LIBPATH}"; then
    LIBPATH=$LD_LIBRARY_PATH
    export LIBPATH
fi
echo ==================================================
echo Environment variables:
env
echo ==================================================
echo Directory contents:
ls -Rl
echo ==================================================
for installer in `ls gt*-all-source-installer.tar.gz *nightly.tar.gz`; do
    echo ==================================================
    echo Installing Globus Toolkit \($installer\)...
    tar xfz $installer
    cd gt*-installer
    ./configure --prefix=$GLOBUS_LOCATION --with-buildopts="-verbose"
    make gsi-myproxy install
    . $GLOBUS_LOCATION/etc/globus-user-env.sh
    echo ==================================================
    echo Environment variables:
    env
    echo ==================================================
    flavor=`gpt-query -name=myproxy | perl -n -e 'if (/myproxy-(.*)-pgm/){print "$1\n";}'|head -1`
    echo GPT flavor is $flavor.
    echo ==================================================
    echo Installing autotools...
    cd ../autotools
    ./install-autotools $GLOBUS_LOCATION
    echo ==================================================
    echo Building MyProxy...
    cd ../myproxy
    ./bootstrap
    ./configure --with-flavor=$flavor
    make dist
    gpt-uninstall myproxy
    gpt-build -verbose myproxy-*.tar.gz $flavor
    echo ==================================================
    echo Testing MyProxy...
    MY_X509_CERT_DIR=$GLOBUS_LOCATION/share/certificates
    mkdir $MY_X509_CERT_DIR
    cp nmi/*.0 nmi/*.signing_policy $MY_X509_CERT_DIR
    chmod 0600 nmi/userkey.pem
    grid-proxy-init -debug -verify -cert nmi/usercert.pem -key nmi/userkey.pem
    myproxy-test -startserver $valgrind
    myproxy-test-replicate
    cd ..
    rm -rf gt*-installer
    rm -rf $GLOBUS_LOCATION
done
) 2>&1 # we want stdout & stderr mixed in the output file
