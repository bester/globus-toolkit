#!/bin/sh
set -e # exit on any error
GLOBUS_LOCATION=$_CONDOR_SCRATCH_DIR/globus
LOGNAME=$USER
export GLOBUS_LOCATION LOGNAME
(
if test -n "${_NMI_PREREQ_openssl_0_9_8e_shared_ROOT}"; then
    PKG_CONFIG_PATH="${_NMI_PREREQ_openssl_0_9_8e_shared_ROOT}/lib/pkgconfig"
    OPENSSL_CFLAGS="-I${_NMI_PREREQ_openssl_0_9_8e_shared_ROOT}/include"
    OPENSSL_INCLUDES="-I${_NMI_PREREQ_openssl_0_9_8e_shared_ROOT}/include"
    OPENSSL_LDFLAGS="-L${_NMI_PREREQ_openssl_0_9_8e_shared_ROOT}/lib"
    OPENSSL_LIBS="-lssl -lcrypto"
    export PKG_CONFIG_PATH
    export OPENSSL_CFLAGS OPENSSL_INCLUDES OPENSSL_LDFLAGS OPENSSL_LIBS
elif test -n "${_NMI_PREREQ_openssl_0_9_7_shared_ROOT}"; then
    PKG_CONFIG_PATH="${_NMI_PREREQ_openssl_0_9_7_shared_ROOT}/lib/pkgconfig"
    OPENSSL_CFLAGS="-I${_NMI_PREREQ_openssl_0_9_7_shared_ROOT}/include"
    OPENSSL_INCLUDES="-I${_NMI_PREREQ_openssl_0_9_7_shared_ROOT}/include"
    OPENSSL_LDFLAGS="-L${_NMI_PREREQ_openssl_0_9_7_shared_ROOT}/lib"
    OPENSSL_LIBS="-lssl -lcrypto"
    export PKG_CONFIG_PATH
    export OPENSSL_CFLAGS OPENSSL_INCLUDES OPENSSL_LDFLAGS OPENSSL_LIBS
fi
echo ==================================================
echo Environment variables:
env
echo ==================================================
echo Directory contents:
ls -Rl
echo ==================================================
valgrind=""
if test -d /prereq/valgrind-2.4.0/bin; then
    echo /prereq/valgrind-2.4.0/bin exists
    PATH=$PATH:/prereq/valgrind-2.4.0/bin
    export PATH
    valgrind="-valgrind"
    echo valgrind found.
else
    echo valgrind not found.
fi
echo ==================================================
echo Installing Globus Toolkit...
tar xfz gt*-all-source-installer.tar.gz
cd gt4*-installer
./configure --prefix=$GLOBUS_LOCATION --with-buildopts="-verbose"
make gsi-myproxy install
. $GLOBUS_LOCATION/etc/globus-user-env.sh
echo ==================================================
flavor=`gpt-query -name=myproxy | perl -n -e 'if (/myproxy-(.*)-pgm/){print "$1\n";}'|head -1`
echo GPT flavor is $flavor.  Installing globus_core.
gpt-build -nosrc $flavor
echo ==================================================
echo Installing autotools...
cd ../autotools
./install-autotools $GLOBUS_LOCATION
echo ==================================================
echo Building MyProxy...
cd ../myproxy
./bootstrap
./configure --with-flavor=$flavor
make dist
gpt-uninstall myproxy
gpt-build -verbose myproxy-*.tar.gz $flavor
echo ==================================================
echo Testing MyProxy...
MY_X509_CERT_DIR=$GLOBUS_LOCATION/share/certificates
mkdir $MY_X509_CERT_DIR
cp nmi/*.0 nmi/*.signing_policy $MY_X509_CERT_DIR
chmod 0600 nmi/userkey.pem
grid-proxy-init -debug -verify -cert nmi/usercert.pem -key nmi/userkey.pem
myproxy-test -startserver $valgrind
myproxy-test-replicate
cd ..
if test -f nightly.tar.gz; then
    echo ==================================================
    echo Installing GT CVS Trunk...
    GLOBUS_LOCATION=$_CONDOR_SCRATCH_DIR/globus-trunk
    tar xfz nightly.tar.gz
    cd gtTRUNK-all-source-installer
    ./configure --prefix=$GLOBUS_LOCATION --with-buildopts="-verbose"
    make gsi-myproxy install
    . $GLOBUS_LOCATION/etc/globus-user-env.sh
    echo ==================================================
    flavor=`gpt-query -name=myproxy | perl -n -e 'if (/myproxy-(.*)-pgm/){print "$1\n";}'|head -1`
    echo GPT flavor is $flavor.
    echo ==================================================
    echo Installing autotools...
    cd ../autotools
    ./install-autotools $GLOBUS_LOCATION
    echo ==================================================
    echo Building MyProxy...
    cd ../myproxy
    ./bootstrap
    ./configure --with-flavor=$flavor
    make dist
    gpt-uninstall myproxy
    gpt-build -verbose myproxy-*.tar.gz $flavor
    echo ==================================================
    echo Testing MyProxy...
    MY_X509_CERT_DIR=$GLOBUS_LOCATION/share/certificates
    mkdir $MY_X509_CERT_DIR
    cp nmi/*.0 nmi/*.signing_policy $MY_X509_CERT_DIR
    myproxy-test -startserver $valgrind
    myproxy-test-replicate
fi
) 2>&1 # we want stdout & stderr mixed in the output file
