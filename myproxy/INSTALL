======
INSTALL		myproxy installation directions
=======

 1.  Prerequisites for building
 2.  Building the software
 3.  Installing the client (user) software
 4.  Installing the myproxy-server
 4a. Installing the myproxy-server using a non-host certificate
 5.  The myproxy-server.config file
 6.  Using myproxy-get-delegation from a trusted service
 7.  Setting up sample CGI script on a web portal


1. Prerequisites for building
-----------------------------

In order to build the myproxy software you will need a version of the
Grid Security Infrastructure (GSI) that supports encrypted user
sessions, included in the Grid API bundle in Globus 2.0.

Alternatively, you can get a standalone version of GSI with encryption
support from <ftp://ftp.globus.org/pub/gsi/gsi-041701.tar.gz> and
build it by following the directions at
<http://www.globus.org/security/v1.1/installation.html>.

NOTE: This prerequisite applies only for building myproxy.  You can
use the myproxy binaries with any recent GSI or Globus distribution.

2. Building the myproxy software
--------------------------------

The myproxy software is built using the standard configure/make
paradigm:

Step 1: Run './configure'
   You will need to provide one of the following arguments:

        --with-globus-flavor=<Globus Grid API bundle flavor>
		The GLOBUS_LOCATION environment variable must also be
		set when building with the Globus Grid API bundle.

	--with-gsi=<path to standalone gsi installation>
		Use this option when building with a standalone
		version of the GSI.

   You may also want to provide one or more of the following
   arguments:

	--prefix=<PATH>
		Set the default installation prefix, ${prefix}, which
		other installation paths are based off of by default.
	
	--with-myproxy-server-path=<PATH>
		Specify myproxy-server install prefix. This is the
		prefix under which the server binaries and configuration
		files will be installed. By default this is
		${prefix}

	--with-myproxy-tools-path=<PATH>
  		Specify myproxy tools install prefix. This is the prefix
		under which the portal tools binaries will be installed.
		By default this is ${prefix}

	--with-myproxy-client-path=<PATH>
		Specify myproxy client intall prefix. This is the prefix
		under which the client binaries will be installed.
		By default this is ${prefix}

	--disable-anonymous-auth
		Use the older GSSAPI authentication code instead of
		the newer SSL code that supports anonymous client
		authentication.

	--enable-conditional-encryption
		Only encrypt network traffic when sending passphrases.
		This option is currently only supported in the old
		GSSAPI code (i.e., with --disable-anonymous-auth).  By
		default, all myproxy communication is encrypted.

Step 2: Run 'make'

Step 3: After a hopefully successful make you are ready to install. You
	can do this by running 'make install', or you can install just
	specific portions with 'make server-install', 'make tools-install'
	or 'make client-install'. You probably will need root access.

3. Installing the client (user) software
----------------------------------------

There really is not any thing to do after installing the client
software to use it. The client programs are myproxy-init and
myproxy-destroy. See the README file for more information on
using the clients.

It is worth noting that the environment variable MYPROXY_SERVER
can be set to tell these programs the hostname where the
myproxy-server is running.

By default, the clients will bind their sockets to a random available
port.  To restrict the clients to a port range, set the
MYPROXY_TCP_PORT_RANGE environment variable.  For example,

  export MYPROXY_TCP_PORT_RANGE=64000,64100

restricts the myproxy clients to bind to ports in the range
64000-64100.  If MYPROXY_TCP_PORT_RANGE is undefined, the myproxy
clients will also check for the GLOBUS_TCP_PORT_RANGE environment
variable.

4. Installing the myproxy-server
--------------------------------

You should choose a well-protected host to run the myproxy-server
on. Consult with security-aware personel at your site. You want
a host that is secured to the level of a kerberos KDC, that is
limited user access, limited services, well monitored and
maintained in terms of security patches.

The host on which the myproxy-server is running will need
to have /etc/grid-security created and a host certificate installed.
Directions for doing so can be found at:

http://www.globus.org/security/v1.1/etc_grid_security.html

After installing the server with 'make install' or 'make
server-install' you should, under the installation
prefix (/usr/local by default), find the following
directories:

sbin	This is where the myproxy-server binary is located.

store	This is where the myproxy server will physically store
	credentials placed under it's care.

etc	This is were the myproxy-server.config file is located.
	See the next section for details on this file.

To run the daemon, run the binary '<prefix>/sbin/myproxy-server'.
The program will start up and background itself. It accepts
connections on TCP port 7512, forking off a seperate child
to handle each incoming connection. It logs information via
the syslog service under the daemon facility.  A sample SysV-style
boot script for MyProxy is provided, named etc.init.d.myproxy.  To
install on Linux, copy the file to /etc/rc.d/init.d/myproxy and run
'chkconfig --add myproxy'.

To run the myproxy server out of inetd, you need to do the 
following as root:

    *  Add the entries in etc.services.modifications to the
       /etc/services file.
       (Under Solaris add the entries to /etc/inet/services.)
 
    *  Add the entries in etc.inetd.conf.modifications to the
       /etc/inetd.conf file.  
       (Under Solaris add the entries to /etc/inet/inetd.conf)  

    *  Reactivate the inetd daemon.
       This is accomplished by sending the SIGHUP signal to
       the daemon.
 
           kill -HUP <pid-of-inetd>

In addition, a myproxy cron script is provided that will remove any
expired credentials. To install the script, you need to make a crontab
entry like the following by issuing "crontab -e" as root and entering:

Check credentials at midnight every night:
0 0 * * * /bin/sh <myproxy-prefix>/etc/myproxy.cron

Check for expired credentials every hour:
0 * * * * /bin/sh <myproxy-prefix>/etc/myproxy.cron

4a. Installing the myproxy-server using a non-host certificate
--------------------------------------------------------------

It is possible to run a myproxy-server using a non-host certificate,
either a normal user certificate or any other certificate you desire.
In order to do so the private key of the certificate will either need
to be non-encrypted or you will need to generate a proxy from the
server to use.

If you are using the key and certificate directly and they are not in
your default locations (i.e. $(HOME)/.globus/usercert.pem and
$(HOME)/.globus/userkey.pem) you will need to set the environment
variables X509_USER_CERT and X509_USER_KEY to the paths of the
certificate and key files respectively before running
myproxy-server.

If you are using a proxy that is not in the default location
(i.e. where grid-proxy-init sticks it by default: /tmp/x509up_u<your
uid>) you will need to set the environment variable X509_USER_PROXY to
the path of the proxy file before running myproxy-server.

Note that when using a proxy you will need to periodically renew the
proxy using grid-proxy-init in order to allow myproxy-server to keep
functioning.

On the client side you will need to inform the client that you are not
expecting the myproxy-server to be running using a host
certificate. You do this by setting the environment variable
MYPROXY_SERVER_DN to the DN of the certificate being used by the
server.

5. The myproxy-server.config file
---------------------------------

You should edit the myproxy-server.config file in order to
restrict the users that are allowed to store credentials
with the myproxy server and, more importantly, what clients
are allowed to retrieve credentials from myproxy-server.
There will be an example myproxy-server.config file installed
for you to start with.

Lines in the configuration file use limited regular expressions
so that you can match classes of users easily. The limited
regular expressions support the shell-stype characters '*' and
'?', where '*' matches any number of characters and '?' matches
any single character.

The DN limited regexes should be delimited with double quotes(").

The config file currently has the following types of lines:

accepted_credentials <DN regex>

	Each of these lines allows any clients whose DNs match the
	given limited regex to connect to the myproxy-server and store
	credentials with it for future retrieval.  Any number of these
	lines may appear.  For backwards compatibility, these lines
	can also start with allowed_clients instead of
	accepted_credentials.

authorized_retrievers <DN regex>

	Each of these lines allows the server administrator to set
	server-wide policies for authorized retrievers. If the client
	DN does not match the given limited regex the client is not
	allowed to retrieve the credentials previously stored by a
	client.  In addition to the server-wide policy, myproxy also
	provides support for per-credential policy. The user can
	specify the regex DN of the allowed retrievers of the
	credential when uploading the credential. The retrieval client
	DN must also match the user specified regex. In order to
	retrieve credentials the client also needs to know the name
	and pass phrase provided by the client when the credentials
	were stored. Any number of these lines may appear.  For
	backwards compatibility, these lines can also start with
	allowed_services instead of authorized_retrievers.

default_retrievers <DN regex>

	Each of these lines allows the server administrator to set
	server-wide default policies. The regex specifies the clients
	who can access the credentials. The default retriever policy
	is enforced if a per-credential policy is not specified on
	upload.  In other words, the client can override this policy
	for a credential on upload.  The per-credential policy is
	enforced in addition to the server-wide policy specified by
	the authorized_retrievers line (which clients can not
	override).  Any number of these lines may be present.  For
	backwards compatibility, if no default_retrievers line is
	specified, the default policy is "*", which allows any client
	to pass the per-credential policy check.  (The client must
	still pass the authorized_retrievers check.)

authorized_renewers <DN regex>

	Each of these lines allows the server administrator to set
	server-wide policies for authorized renewers. If the client DN
	does not match the given limited regex the client is not
	allowed to renew the credentials previously stored by a
	client.  In addition to the server-wide policy, myproxy also
	provides support for per-credential policy. The user can
	specify the regex DN of the allowed renewers of the credential
	on upload. The renewal client DN must match both this regex
	and the user specified regex. In this case, the client must
	also already have a credential with a DN matching the DN of
	the credentials to be retrieved, to be used in a second
	authorization step.

default_renewers <DN regex>

	Each of these lines allows the server administrator to set
	server-wide default renewer policies. The regex specifies the
	clients who can renew the credentials. The default renewer
	policy is enforced if a per-credential policy is not specified
	on upload. This is enforced in addition to the server-wide
	policy specified by the authorized_renewers line. Any number
	of these lines may appear.  For backwards compatibility, if no
	default_renewers line is specified, the default policy is "*",
	which allows any client to pass the per-credential policy
	check.  (The client must still pass the authorized_renewers
	check.)

6. Using myproxy-get-delegation from a trusted service
---------------------------------

To allow a trusted service to authenticate to the myproxy server to
retrieve credentials on behalf of users, it will need a service
certificate. Since the service is unlikely to run as root it probably
will not have access to any host key that exists on the system, so you
probably will want to get a different service certificate for it.

Although the choice of server name is arbitrary, we recommend
a standard of using a common name composed of the service name
"portal" followed by the fully qualified domain name. For example
on the host "foo.ncsa.uiuc.edu" the common name would look like:

portal/foo.ncsa.uiuc.edu

and the full DN as issued by the Alliance CA would look like:
	
/C=US/O=National Computational Science Alliance/CN=portal/foo.ncsa.uiuc.edu

But really it can be anything you want, it just has to be matched
by any allowed_retrievers regex in the myproxy-server.config file.

To generate this certificate follow these steps. The following
example assumes you are using the Globus CA, modify as appropraite
to use another CA.

1) su to the user that will eventually be running the portal
   code (probably user 'nobody'). e.g.
	su nobody
2) Create a directory to hold the certificate and key e.g.:
	mkdir /usr/portal/cert/
3) Run grid-cert-request with the following arguments. Replace
   <fqdn> with the fully qualified domain name of your host:
	grid-cert-request -dir /usr/portal/cert -nopw -cn portal/<fqdn>
4) Get the certificate back from the CA and install as usual.
5) Before running myproxy-get-delegate you will need to set the
   X509_USER_CERT and X509_USER_KEY variables to point at
   the service certificate and key. e.g.
	setenv X509_USER_CERT /usr/portal/cert/usercert.pem
	setenv X509_USER_KEY /usr/portal/cert/userkey.pem

7. Setting up sample CGI script on a web portal
-----------------------------------------

The directory web/ contains a simple HTML file specifying a form to
request a proxy.  After filling out the form, the CGI script,
myproxy-get-delegation.cgi runs myproxy-get-delegation with the user
supplied input and returns the output of the command.

The CGI script myproxy-get-delegation.cgi is intended to demonstrate
the use of myproxy-get-delegation and can be modified to suit a
particular portal's requirements. If a proxy is succesfully retrieved
from myproxy-server, it will store the proxy in the top-level
directory under <username>.cred.


----
End of Installation Directions
----

