#! /usr/bin/env python

# Copyright 1999-2009 University of Chicago
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import sys
import glob
import getopt

sys.path.append(
    os.path.join(os.environ['GLOBUS_LOCATION'], 'lib', 'python', 'usage'))

from packetfile import PacketFile
import packetparser

#defaults
driver = "psycopg2"
database = "newusage"
host = ""
port = ""
user = ""
password = ""
data_directory = os.path.join(os.environ['GLOBUS_LOCATION'], 'var', 'usage')
collector_port = "4810"
# loads configuration file created by setup script
execfile(
    os.path.join(
        os.environ['GLOBUS_LOCATION'], 'etc', 'globus-usage-tools.conf'))

# Import the configured database driver
exec("import %s" % (driver))
driver_module = eval(driver)

def connect_string():
    '''
    Construct a dsn from the defined parameters in the configuration
    '''
    connect_str = "dbname=%s" % (database)
    if user != "":
        connect_str += " user=%s" % (user)
    if password != "":
        connect_str += " password=%s" % (password)
    if host != "":
        connect_str += " host=%s" % (host)
    if port != "":
        connect_str += " port=%s" % (port)
    return connect_str

def usage(exe):
    """
    Print usage string and exit

    """
    print """
Usage: %s [options]
Options:
  -h                        Print this help message and exit
  -d DIRECTORY              Read packets from DIRECTORY instead of the
                            configured path
  -n                        Don't commit usage packets upon completion""" \
    % os.path.basename(exe)
    sys.exit(0)

def main(argv):
    """
    globus-usage-uploader main program

    """
    global data_directory

    commit = True
    opts, args = getopt.getopt(argv[1:], "d:nh")
    for option_name in opts:
        if option_name[0] == "-h":
            usage(argv[0])
        elif option_name[0] == "-d":
            data_directory = option_name[1]
        elif option_name[0] == "-n":
            commit = False
    if args != []:
        print "Unexpected command-line: ", args
        return 1

    con = driver_module.connect(connect_string())
    cursor = con.cursor()

    good_packets = 0
    bad_packets = 0
    good_files = 0
    bad_files = []
    last_dir_name = ''
    for dir_name in glob.glob(os.path.join(data_directory, '[0-9]*')):
        print "Processing packets: " + os.path.basename(dir_name)
        for infile in glob.glob(os.path.join(dir_name, '*.gup')):
            print "" + os.path.basename(infile) + "...",
            os.rename(infile, infile + ".upload")
            p = PacketFile(infile + ".upload", "r")
            packet_types = dict()
            packet_counts = 0
            try:
                while 1:
                    res = p.read_packet()
                    if res is not None:
                        packet = packetparser.parse(res[0], res[1])
                        if not(packet_types.has_key(packet.__class__)):
                            packet_types[packet.__class__] = [packet]
                        else:
                            packet_types[packet.__class__].append(packet)
                        packet_counts += 1
                    else:
                        break
                for packet_type in packet_types.keys():
                    packets = packet_types[packet_type]
                    packets[0].__class__.upload_many(psycopg2, cursor, packets)
                print "ok [" + str(packet_counts) + " packets]"
                if commit:
                    con.commit()
                os.remove(infile + ".upload")
                good_packets += packet_counts
                good_files += 1
            except Exception, detail:
                bad_packets += packet_counts
                os.rename(infile + ".upload", infile + ".failed")
                print "not ok [" + str(detail) + "]"
                con.rollback()
                bad_files.append(infile + ".failed")
    con.rollback()

    print
    print "Processed " + str(good_files + len(bad_files)) + " file(s)."
    print "Processed " + str(good_packets + bad_packets) + " packet(s)."
    print ""
    if len(bad_files) > 0:
        print "***FAILURE processing " + str(len(bad_files)) + " file(s)."
    if bad_packets > 0:
        print "***FAILURE processing " + str(bad_packets) + " packet(s)."
    for path in bad_files:
        print "    " + path
    return (bad_packets != 0 or len(bad_files) != 0)

if __name__ == "__main__":
    retval = main(sys.argv)
    sys.exit(retval)
# vim: set ts=4:sw=4:syntax=python
