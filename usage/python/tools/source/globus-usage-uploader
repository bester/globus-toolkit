#! /usr/bin/python

# Copyright 1999-2009 University of Chicago
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""
The globus-usage-uploader command is a utility which parses usage
packets in directories of the form created by globus-usage-collector
and uploads them to a postgresql database.
"""

import os
import sys
import glob
import getopt
import time
from datetime import datetime

from globus.usage.packetfile import PacketFile
import globus.usage.packetparser as packetparser
import globus.usage.usageconfig as usageconfig

ptype_map = {
    (0,0): 'gridftp',
    (1,1): 'gram4',
    (3,1): 'javawscore.1',
    (3,2): 'javawscore.2',
    (3,3): 'javawscore.3',
    (4,1): 'cwscore.1',
    (4,2): 'cwscore.2',
    (5,1): 'rftpacket',
    (6,0): 'mdsaggregator',
    (7,0): 'rls',
    (8,0): 'mpig',
    (9,0): 'drs',
    (10,1): 'ogsadai',
    (11,0): 'myproxy',
    (20,0): 'gram5.jobmanager',
    (20,1): 'gram5.job'
}

class UploaderPacketStats:
    """
    This object contains statistics about the uploads that this
    program has done.
    """
    def __init__(self):
        self.good = {}
        self.bad = {}

    def add(self, packet_type, total, bad):
        """
        Add information about an upload of a batch of a particular usage packet
        type to the database.

        Parameters:
            packet_type: A unique identifier of a packet type.
            total: The total number of packets which were in this packet batch
            bad: A list of bad packets (each of a type derived from the
            UsagePacket class)
        """
        bad_count = 0
        if not(packet_type in self.good):
            self.good[packet_type] = 0
        if bad:
            if not(packet_type in self.bad):
                self.bad[packet_type] = {}
            self.bad[packet_type].extend(bad)
            bad_count = len(bad)
        self.good[packet_type] += total - bad_count

    def good_summary(self, packet_type):
        """
        Returns a string summarizing the good packets that were uploaded to
        the database. If none of that type were uploaded, returns None

        Parameters:
            packet_type: A unique identifier of a packet type.
        """
        if packet_type in self.good:
            return str(self.good[packet_type])
        else:
            return None

    def bad_summary(self, packet_type):
        """
        Returns a string summarizing the bad packets that were uploaded to
        the database. If none of that type failed, returns None

        Parameters:
            packet_type: A unique identifier of a packet type.
        """
        addrs = {}
        res = ""
        if packet_type in self.bad:
            for packet in self.bad[packet_type]:
                addr = 'UNKNOWN'
                if packet is not None:
                    if packet.ip_address is not None:
                        addr = packet.ip_address
                if not (addr in addrs):
                    addrs[addr] = 0
                addrs[addr] += 1

            addrkeys = addrs.keys()
            addrkeys.sort()
            for addr in addrkeys:
                res += str(addr) + ": " + str(addrs[addr]) + "\n"
        else:
            res = None

        if res == '':
            res = None
        return res

def usage(exe):
    """
    Print usage string and exit

    """
    print """
Usage: %s [options]
Options:
  -h                        Print this help message and exit
  -c CONFIG-FILE            Read configuration from CONFIG-FILE
  -d DIRECTORY              Read packets from DIRECTORY instead of the
                            configured path
  -p PIDFILE                Don't start if PIDFILE exists and contains the
                            process ID of an existing process. If it
                            doesn't exist or the PID is not valid, write
                            the current process's ID to that file
  -n                        Don't commit usage packets upon completion""" \
    % os.path.basename(exe)
    sys.exit(0)

def main(argv):
    """
    globus-usage-uploader main program

    """
    commit = True
    opts, args = getopt.getopt(argv[1:], "d:nhc:p:")
    config_file = None
    config_data_dir = None
    pidfile = None
    for option_name in opts:
        if option_name[0] == "-h":
            usage(argv[0])
        elif option_name[0] == "-d":
            config_data_dir = option_name[1]
        elif option_name[0] == "-n":
            commit = False
        elif option_name[0] == "-c":
            config_file = option_name[1]
        elif option_name[0] == "-p":
            pidfile = option_name[1]
    if args != []:
        print "Unexpected command-line: ", args
        return 1

    if pidfile is not None:
        pid = None
        pidfd = None
        try:
            pidfd = open(pidfile, 'r')
            pid = int(pidfd.read())
        except:
            pass
        if pidfd is not None:
            pidfd.close()

        if pid is not None and pidfd:
            try:
                os.kill(pid, 0)
                print sys.argv[0] + " is already running with pid %d" % (pid)
                sys.exit(0)
            except OSError:
                os.remove(pidfile)
        try:
            pidfd = open(pidfile, 'w')
            pidfd.write(str(os.getpid()) + "\n")
        except:
            pass
        if pidfd is not None:
            pidfd.close()

    config = usageconfig.UsageConfig(path = config_file)
    if config_data_dir is not None:
        config.data_directory = config_data_dir
    con = config.connect()
    cursor = con.cursor()

    packstats = UploaderPacketStats()
    good_files = 0
    bad_files = []

    for dir_name in glob.glob(os.path.join(config.data_directory, '[0-9]*')):
        first = True
        dd = datetime(*time.strptime(os.path.basename(dir_name), "%Y%m%d")[0:6])
        now = datetime.utcnow()
        todays_files = (now.year == dd.year and now.month == dd.month and \
            now.day == dd.day)
        for infile in glob.glob(os.path.join(dir_name, '*.gup')):
            hour = os.path.basename(infile).split(".")[0]
            if todays_files and int(hour) >= now.hour:
                continue
            if first:
                print "Processing packets: " + os.path.basename(dir_name)
                first = False
            print "" + os.path.basename(infile) + "..."
            os.rename(infile, infile + ".upload")
            p = PacketFile(infile + ".upload", "r")
            while 1:
                packet_types = {}
                packet_counts = 0
                # Process 10000 packets at a go
                for _ in range(0, 10000):
                    res = p.read_packet()
                    if res is not None:
                        if res[1] != None:
                            packet = packetparser.parse(res[0], res[1])
                            packetkey = (packet.component_code,
                                packet.packet_version)

                            if packetkey in packet_types:
                                packet_types[packetkey].append(packet)
                            else:
                                packet_types[packetkey] = [packet]
                            packet_counts += 1
                    else:
                        break
                if packet_counts == 0:
                    # Nothing left in the file 
                    break

                # Upload by the packets component/version
                for packet_type in packet_types.keys():
                    packets = packet_types[packet_type]
                    this_bad = packets[0].__class__.upload_many(
                            config.driver_module, cursor, packets)

                    packstats.add(packet_type, len(packets), this_bad)
            if commit:
                con.commit()
            os.remove(infile + ".upload")
            good_files += 1
    if not commit:
        con.rollback()
    print
    print "Processed " + str(good_files + len(bad_files)) + " file(s)."

    ptypes = ptype_map.keys()
    ptypes.sort()
    print ""
    print "Summary: "
    for packet_type in ptypes:
        summary = packstats.good_summary(packet_type)
        if summary is not None:
            print ptype_map[packet_type] + ": " + summary

    any_errs = False
    for packet_type in ptypes:
        summary = packstats.bad_summary(packet_type)
        if summary is not None:
            if any_errs is False:
                print "Error Summary:"
                any_errs = True
                print ptype_map[packet_type]
                print summary
    for path in bad_files:
        print "    " + path
    if pidfile is not None:
        os.remove(pidfile)
    return len(bad_files) != 0

if __name__ == "__main__":
    retval = main(sys.argv)
    sys.exit(retval)
# vim: set ts=4:sw=4:syntax=python
