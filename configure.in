dnl Process this file with autoconf to produce a configure script.

AC_REVISION($Revision: 1.25 $)
AC_INIT(Makefile.am)

GLOBUS_INIT

AM_PROG_LIBTOOL

dnl config header goes here

dnl Initialize the automake rules the last argument
AM_INIT_AUTOMAKE($GPT_NAME, $GPT_VERSION)

dnl These switches are provided for users who manually build myproxy.
dnl gpt-build will use the default values for these switches.

AC_ARG_ENABLE(anonymous-auth,
	[  --disable-anonymous-auth  Disable support for SSL anonymous authentication],
	if test "$enableval" = yes ; then
	   AC_MSG_RESULT([SSL anonymous authentication support enabled])
	   AC_DEFINE(SUPPORT_SSL_ANONYMOUS_AUTH)
	else
	   AC_MSG_RESULT([SSL anonymous authentication support disabled])
	fi,
	AC_DEFINE(SUPPORT_SSL_ANONYMOUS_AUTH)
	AC_MSG_RESULT([SSL anonymous authentication support enabled]))

AC_ARG_ENABLE(conditional-encryption,
	[  --enable-conditional-encryption  Only encrypt when sending passphrase],
	if test "$enableval" = yes ; then
	   AC_MSG_RESULT([Conditional encryption support enabled])
	   AC_DEFINE(CONDITIONAL_ENCRYPTION)
	else
	   AC_MSG_RESULT([Encryption required on all communication])
	fi,
	AC_MSG_RESULT([Encryption required on all communication]))


dnl
dnl Figure out which regular expression parser to use.
dnl  (taken from krb5/lib/krb5/os/configure.in)
dnl Try, in order, regcomp, compile/step
dnl
AC_HAVE_HEADERS(regex.h regexpr.h)
dnl
dnl regcomp (which is present but non-functional on Solaris 2.4)
dnl
AC_CACHE_CHECK([for working regcomp],
  [ac_cv_func_regcomp],
  [AC_TRY_RUN([
#include <sys/types.h>
#include <regex.h>
regex_t x; regmatch_t m;
int main() { return regcomp(&x,"pat.*",0) || regexec(&x,"pattern",1,&m,0); }
    ], ac_cv_func_regcomp=yes, ac_cv_func_regcomp=no, ac_cv_func_regcomp=no)])
dnl
dnl compre/step
dnl
save_LIBS=$LIBS
LIBS=-lgen
dnl this will fail if there's no compile/step in -lgen, or if there's
dnl no -lgen.  This is fine.
AC_CHECK_FUNCS(compile step, have_func_compile=yes)
LIBS=$save_LIBS
dnl
if test "$ac_cv_func_regcomp" = yes ; then
  AC_MSG_RESULT([Using re_comp for regular expression matching])
  AC_DEFINE(HAVE_REGCOMP)
elif test "$have_func_compile" = yes ; then
  AC_MSG_RESULT([Using compile/step for regular expression matching])
  AC_CHECK_LIB(gen, compile, [SERVERLIBS="$SERVERLIBS -lgen"])
else
  AC_MSG_WARN([No support for regular expression matching])
fi
dnl
dnl Check for vsnprintf()
dnl
AC_CHECK_FUNCS(vsnprintf)
dnl
dnl Check for setenv()
dnl
AC_CHECK_FUNCS(setenv)
dnl
dnl Check to see if we need "netlibs" (specifically, libnsl and libsocket)
dnl
uname=`(uname) 2>/dev/null`
if test "$uname" != IRIX -a "$uname" != IRIX64 ; then
	AC_CHECK_LIB(socket, socket,
[	SYSLIBS="$SYSLIBS -lsocket"], ,-lnsl)
	AC_CHECK_LIB(nsl, t_bind,
[	SYSLIBS="$SYSLIBS -lnsl"])
fi
AC_SUBST(SYSLIBS)
dnl
dnl
dnl

dnl Dirty hack to fix Redhat 7.1 Linux
dnl Optimization causes strdup to be replaced with a macro that
dnl causes a compiler error.

CFLAGS=

LAC_DOXYGEN([" ../ "])

GLOBUS_FINALIZE

AC_OUTPUT(
	Makefile
	pkgdata/Makefile
	pkgdata/pkg_data_src.gpt
        myproxy.cron
	Makefile
	doxygen/Makefile
	doxygen/Doxyfile
	doxygen/Doxyfile-internal
	web/Makefile
	,
	$GPT_LOCATION/sbin/gpt_generate_bin_pkg_data \
	--flavor=$GLOBUS_FLAVOR_NAME "./pkgdata/pkg_data_src.gpt"
	,
	GLOBUS_FLAVOR_NAME=$GLOBUS_FLAVOR_NAME
	GLOBUS_LOCATION=$GLOBUS_LOCATION
	GPT_LOCATION=$GPT_LOCATION
)
