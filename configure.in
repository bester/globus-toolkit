AC_INIT(myproxy_server.c)

AC_MSG_CHECKING(for myproxy-server installation prefix)
dnl The default:
MYPROXY_SERVER_DIR="\$(prefix)"
AC_ARG_WITH(myproxy-server-path,
	[  --with-myproxy-server-path=PATH  Specify myproxy-server install prefix],
	MYPROXY_SERVER_DIR=$withval)
AC_MSG_RESULT($MYPROXY_SERVER_DIR)
AC_SUBST(MYPROXY_SERVER_DIR)

AC_MSG_CHECKING(for myproxy tools install prefix)
dnl The default:
MYPROXY_TOOLS_DIR="\$(prefix)"
AC_ARG_WITH(myproxy-tools-path,
	[  --with-myproxy-tools-path=PATH   Specify myproxy tools install prefix],
	MYPROXY_TOOLS_DIR=$withval)
AC_MSG_RESULT($MYPROXY_TOOLS_DIR)
AC_SUBST(MYPROXY_TOOLS_DIR)


AC_MSG_CHECKING(for myproxy client install prefix)
dnl The default:
MYPROXY_CLIENT_DIR="\$(prefix)"
AC_ARG_WITH(myproxy-client-path,
	[  --with-myproxy-client-path=PATH  Specify myproxy client intall prefix],
	MYPROXY_CLIENT_DIR=$withval)
AC_MSG_RESULT($MYPROXY_CLIENT_DIR)
AC_SUBST(MYPROXY_CLIENT_DIR)


AC_MSG_CHECKING(for GSI installation path)
GSI_INSTALL_PATH="$GLOBUS_LOCATION"
GLOBUS_FLAVOR=""

dnl --with-gsi
AC_ARG_WITH(gsi,
	[  --with-gsi=PATH              Specify GSI install path],
	GSI_INSTALL_PATH=$withval)

dnl --with-globus-flavor
AC_ARG_WITH(globus-flavor,
	[  --with-globus-flavor=FLAVOR  Specify Globus build flavor],
	GLOBUS_FLAVOR=$withval)

dnl Check GSI_INSTALL_PATH
if test -z "${GSI_INSTALL_PATH}" ; then
	AC_MSG_ERROR(Must set GLOBUS_LOCATION or specify --with-gsi)
fi

if test ! -d "${GSI_INSTALL_PATH}" ; then
	AC_MSG_ERROR(GSI install path not found: ${GSI_INSTALL_PATH})
fi

if test -x ${GSI_INSTALL_PATH}/sbin/globus-makefile-header ; then
	# Globus 2.0 installation
	# Build flavor must be specified.
	if test -z "${GLOBUS_FLAVOR}" ; then
		AC_MSG_ERROR(Must specify --with-globus-flavor)
	fi
	`${GSI_INSTALL_PATH}/sbin/globus-makefile-header -flavor=${GLOBUS_FLAVOR} globus_gss_assist globus_gssapi_gsi globus_openssl > ${srcdir}/globus_makefile_header`
        GLOBUS_MAKEFILE_HEADER=${srcdir}/globus_makefile_header

elif test -d ${GSI_INSTALL_PATH}/lib ; then
	# Looks like a flat directory structure from configure/make and not
	# gsi-install
	GSI_DEV_PATH=${GSI_INSTALL_PATH}
        GLOBUS_MAKEFILE_HEADER=${srcdir}/globus_makefile_header

else
	# Assume a true gsi installation with architecture
	# directories and run globus-development-path to find
	# the development directory

	# Export GLOBUS_INSTALL_PATH so programs will run.
	# Also override any GLOBUS_INSTALL_PATH that may be set that
	# is pointing to a different directory.
	#
	# Note that the GLOBUS_INSTALL_PATH environment variable overrides
	# the GSI_INSTALL_PATH environment variable, so we must set it
	# instead.
	
	GLOBUS_INSTALL_PATH=${GSI_INSTALL_PATH}
	export GLOBUS_INSTALL_PATH

	dev_path_program=${GSI_INSTALL_PATH}/bin/globus-development-path

	if test ! -x ${dev_path_program} ; then
		AC_MSG_ERROR(Cannot find GSI installation directory: program ${dev_path_program} does not exist or is not executable)
	fi

	GSI_DEV_PATH=`${dev_path_program}`

	if test -z "$GSI_DEV_PATH" -o "X$GSI_DEV_PATH" = "X<not found>" ; then
		AC_MSG_ERROR(Cannot find GSI development directory)
	fi

	if test ! -d "$GSI_DEV_PATH" ; then
		AC_MSG_ERROR(Cannot find GSI development directory: $GSI_DEV_PATH does not exist)
	fi
        GLOBUS_MAKEFILE_HEADER=${GSI_DEV_PATH}/etc/makefile_header
fi

AC_MSG_RESULT($GSI_INSTALL_PATH)
AC_SUBST(GLOBUS_MAKEFILE_HEADER)

AC_ARG_ENABLE(anonymous-auth,
	[  --disable-anonymous-auth  Disable support for SSL anonymous authentication],
	if test "$enableval" = yes ; then
	   AC_MSG_RESULT([SSL anonymous authentication support enabled])
	   AC_DEFINE(SUPPORT_SSL_ANONYMOUS_AUTH)
	else
	   AC_MSG_RESULT([SSL anonymous authentication support disabled])
	fi,
	AC_DEFINE(SUPPORT_SSL_ANONYMOUS_AUTH)
	AC_MSG_RESULT([SSL anonymous authentication support enabled]))

AC_ARG_ENABLE(conditional-encryption,
	[  --enable-conditional-encryption  Only encrypt when sending passphrase],
	if test "$enableval" = yes ; then
	   AC_MSG_RESULT([Conditional encryption support enabled])
	   AC_DEFINE(CONDITIONAL_ENCRYPTION)
	else
	   AC_MSG_RESULT([Encryption required on all communication])
	fi,
	AC_MSG_RESULT([Encryption required on all communication]))

dnl
dnl Figure out which regular expression parser to use.
dnl  (taken from krb5/lib/krb5/os/configure.in)
dnl Try, in order, regcomp, compile/step
dnl
AC_HAVE_HEADERS(regex.h regexpr.h)
dnl
dnl regcomp (which is present but non-functional on Solaris 2.4)
dnl
AC_CACHE_CHECK([for working regcomp],
  [ac_cv_func_regcomp],
  [AC_TRY_RUN([
#include <sys/types.h>
#include <regex.h>
regex_t x; regmatch_t m;
int main() { return regcomp(&x,"pat.*",0) || regexec(&x,"pattern",1,&m,0); }
    ], ac_cv_func_regcomp=yes, ac_cv_func_regcomp=no, ac_cv_func_regcomp=no)])
dnl
dnl compre/step
dnl
save_LIBS=$LIBS
LIBS=-lgen
dnl this will fail if there's no compile/step in -lgen, or if there's
dnl no -lgen.  This is fine.
AC_CHECK_FUNCS(compile step, have_func_compile=yes)
LIBS=$save_LIBS
dnl
if test "$ac_cv_func_regcomp" = yes ; then
  AC_MSG_RESULT([Using re_comp for regular expression matching])
  AC_DEFINE(HAVE_REGCOMP)
elif test "$have_func_compile" = yes ; then
  AC_MSG_RESULT([Using compile/step for regular expression matching])
  AC_CHECK_LIB(gen, compile, [SERVERLIBS="$SERVERLIBS -lgen"])
else
  AC_MSG_WARN([No support for regular expression matching])
fi
dnl
dnl Check for vsnprintf()
dnl
AC_CHECK_FUNCS(vsnprintf)
dnl
dnl Check for setenv()
dnl
AC_CHECK_FUNCS(setenv)
dnl
dnl Check to see if we need "netlibs" (specifically, libnsl and libsocket)
dnl
uname=`(uname) 2>/dev/null`
if test "$uname" != IRIX -a "$uname" != IRIX64 ; then
	AC_CHECK_LIB(socket, socket,
[	SYSLIBS="$SYSLIBS -lsocket"], ,-lnsl)
	AC_CHECK_LIB(nsl, t_bind,
[	SYSLIBS="$SYSLIBS -lnsl"])
fi
AC_SUBST(SYSLIBS)
dnl
dnl
dnl
AC_OUTPUT(Makefile myproxy.cron)
