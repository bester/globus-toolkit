dnl Process this file with autoconf to produce a configure script.

AC_REVISION($Revision: 1.52 $)
AC_INIT(Makefile.am)

GLOBUS_INIT

AM_PROG_LIBTOOL
AC_PROG_LN_S

dnl config header goes here

dnl Initialize the automake rules the last argument
AM_INIT_AUTOMAKE($GPT_NAME, $GPT_VERSION)

dnl
dnl Figure out which regular expression parser to use.
dnl  (taken from krb5/lib/krb5/os/configure.in)
dnl Try, in order, regcomp, compile/step
dnl
AC_HAVE_HEADERS(regex.h regexpr.h)
dnl
dnl regcomp (which is present but non-functional on Solaris 2.4)
dnl
AC_CACHE_CHECK([for working regcomp],
  [ac_cv_func_regcomp],
  [AC_TRY_RUN([
#include <sys/types.h>
#include <regex.h>
regex_t x; regmatch_t m;
int main() { return regcomp(&x,"pat.*",0) || regexec(&x,"pattern",1,&m,0); }
    ], ac_cv_func_regcomp=yes, ac_cv_func_regcomp=no, ac_cv_func_regcomp=no)])
dnl
dnl compre/step
dnl
save_LIBS=$LIBS
LIBS=-lgen
dnl this will fail if there's no compile/step in -lgen, or if there's
dnl no -lgen.  This is fine.
AC_CHECK_FUNCS(compile step, have_func_compile=yes)
LIBS=$save_LIBS
dnl
if test "$ac_cv_func_regcomp" = yes ; then
  AC_MSG_RESULT([Using re_comp for regular expression matching])
  AC_DEFINE(HAVE_REGCOMP)
elif test "$have_func_compile" = yes ; then
  AC_MSG_RESULT([Using compile/step for regular expression matching])
  AC_CHECK_LIB(gen, compile, [SERVERLIBS="$SERVERLIBS -lgen"])
else
  AC_MSG_WARN([No support for regular expression matching])
fi
dnl
dnl Check for vsnprintf()
dnl
AC_CHECK_FUNCS(vsnprintf)
dnl
dnl Check for setenv()
dnl
AC_CHECK_FUNCS(setenv)
dnl
dnl Check for unsetenv()
dnl
AC_CHECK_FUNCS(unsetenv)
dnl
dnl Check for getopt_long()
dnl
AC_HAVE_HEADERS(getopt.h)
AC_CHECK_FUNCS(getopt_long)
dnl
dnl Check for socklen_t
dnl
AC_CHECK_TYPES(socklen_t)
dnl
dnl Check to see if we need "netlibs" (specifically, libnsl and libsocket)
dnl
uname=`(uname) 2>/dev/null`
if test "$uname" != IRIX -a "$uname" != IRIX64 ; then
	AC_CHECK_LIB(socket, socket,
[	SYSLIBS="$SYSLIBS -lsocket"], ,-lnsl)
	AC_CHECK_LIB(nsl, t_bind,
[	SYSLIBS="$SYSLIBS -lnsl"])
fi
AC_SUBST(SYSLIBS)
dnl
dnl Check for SASL
dnl
AC_ARG_WITH(sasl2,
	[ --with-sasl2=PATH        Build with SASL V2 support],
	[
		if test "x$withval" = "xyes" ; then
		   AC_MSG_ERROR([--with-sasl2 requires PATH argument])
		fi
		if test "x$withval" != "xno" ; then
		   CPPFLAGS="-I${withval}/include/sasl $CPPFLAGS"
		   LDFLAGS="$LDFLAGS -L${withval}/lib"
		   AC_CHECK_HEADER(sasl.h)
		   AC_CHECK_LIB(sasl2, sasl_client_init, ,
				AC_MSG_ERROR([libsasl2 not found]))
		   AC_MSG_CHECKING(that sasl.h matches libsasl2)
		   AC_TRY_RUN([
#include <sasl.h>
int main() { if (SASL_VERSION_MAJOR != 2) exit(1); else exit(0); }
		      ],
		      [AC_MSG_RESULT([yes])],
		      [
			AC_MSG_RESULT([no])
			AC_MSG_ERROR([sasl.h does not match libsasl2])
		      ],
		      [AC_MSG_RESULT([yes])])
		fi
	]
)
dnl
dnl Check for Kerberos
dnl
AC_ARG_WITH(kerberos5,
       [ --with-kerberos5=PATH    Build with Kerberos V5 support],
       [
               if test "x$withval" = "xyes" ; then
                  AC_MSG_ERROR([--with-kerberos5 requires PATH argument])
               fi
               if test "x$withval" != "xno" ; then
                  KRB5CPPFLAGS="-I${withval}/include $CPPFLAGS"
		  AC_SUBST(KRB5CPPFLAGS)
		  AC_DEFINE(BUILD_GSSAPI_PLUGIN)
               fi
       ]
)
dnl
dnl Check for PAM
dnl
AC_CHECK_HEADERS(security/pam_appl.h pam/pam_appl.h)
if test "x$ac_cv_header_security_pam_appl_h" = "xyes" || \
   test "x$ac_cv_header_pam_pam_appl_h" = "xyes" ; then
   AC_CHECK_LIB(dl, dlopen, , )
   AC_CHECK_LIB(pam, pam_set_item, , )
fi

dnl
dnl Check for OpenLDAP
dnl

AC_ARG_WITH(openldap,
       [ --with-openldap=PATH    Build with OpenLDAP CA support],
       [
               if test "x$withval" = "xyes" ; then
                  AC_MSG_ERROR([--with-openldap requires PATH argument])
               fi
               if test "x$withval" != "xno" ; then
		  CPPFLAGS="-I${withval}/include $CPPFLAGS"
		  LDFLAGS="$LDFLAGS -L${withval}/lib"
		  AC_CHECK_HEADERS(ldap.h)
		  AC_CHECK_LIB(ldap, ldap_sasl_bind_s, ,
				     AC_MSG_ERROR([ldap_sasl_bind_s not found in libldap]) )
		  AC_CHECK_LIB(ldap, ldap_search_ext_s, ,
				     AC_MSG_ERROR([ldap_search_ext_s not found in libldap]) )
               fi
       ]
)

dnl
dnl Check for VOMS libraries
dnl

AC_ARG_WITH(voms,
	[ --with-voms=PATH	Build with VOMS support],
	[
		if test "x$withval" = "xyes" ; then
		   AC_MSG_ERROR([--with-voms requires PATH argument])
		fi
		if test "x$withval" != "xno" ; then
		   VOMS_CPPFLAGS="-I${withval}/include -I${withval}/include/glite/security/voms"
		   VOMS_LDFLAGS="-L${withval}/lib"
		   VOMS_LIBS="-lvomsc"
                   AC_SUBST(VOMS_CPPFLAGS)
		   AC_SUBST(VOMS_LDFLAGS)
		   AC_SUBST(VOMS_LIBS)
                   AC_DEFINE(HAVE_VOMS)
		fi
	]
)

LAC_DOXYGEN([" ../ "])

GLOBUS_FINALIZE

AC_OUTPUT(
	pkgdata/Makefile
	pkgdata/pkg_data_src.gpt
	Makefile
	doxygen/Makefile
	doxygen/Doxyfile
	doxygen/Doxyfile-internal
	web/Makefile
	man/Makefile
	,
	$GPT_LOCATION/sbin/gpt_generate_bin_pkg_data \
	--flavor=$GLOBUS_FLAVOR_NAME "./pkgdata/pkg_data_src.gpt"
	,
	GLOBUS_FLAVOR_NAME=$GLOBUS_FLAVOR_NAME
	GLOBUS_LOCATION=$GLOBUS_LOCATION
	GPT_LOCATION=$GPT_LOCATION
)
