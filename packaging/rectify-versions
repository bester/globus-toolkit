#!/usr/bin/perl

use Getopt::Long;
use POSIX;
use XML::Parser;
use Pod::Usage;
use Data::Dumper;
use strict;

my $gptfile;
my $verbose;
my $gtrelease = undef;
my $gtreleaseuri = undef;
my $changelog = undef;
my %changelogs;
my $prompt_for_changelog = undef;
my $cvs_changelog = undef;
my $bumprelease = undef;
my $new_release = undef;
my $dryrun = 0;
my $update;
my $help;
my @packagelist = ();

# Parse a gpt source metadata package into a perl hash of values that
# includes the package name, version, soname, and its dependencies.
sub parse_package
{
    my $parser = new XML::Parser(Style => 'Objects', Pkg => 'GPT');

    my %srcdeps;
    my %depsuntyped;
    my %setupdeps;

    my $gptdoc = $parser->parsefile($_[0]);

    my $gptmeta = $gptdoc->[0];
    my $gptname = $gptmeta->{Name};

    my $gptagingver =
        (grep {$_->isa('GPT::Aging_Version')} @{$gptmeta->{Kids}})[0];
    my $gptmajorver = $gptagingver->{Major};
    my $gptminorver = $gptagingver->{Minor};
    my $gptage      = $gptagingver->{Age};

    my $gptdesc =  (grep {$_->isa('GPT::Description')} @{$gptmeta->{Kids}})[0];
    my $description = $gptdesc->{Kids}->[0]->{Text};
    $description =~ s!^\s+|\s+$!!g;

    my $srcpkg = (grep {$_->isa('GPT::src_pkg')} @{$gptmeta->{Kids}})[0];
    for my $srcdep (
            grep {$_->isa('GPT::Source_Dependencies')} @{$srcpkg->{Kids}})
    {
        my $type = $srcdep->{Type};
        $srcdeps{$type} = {} unless defined $srcdeps{$type};
        for my $dep (grep {$_->isa('GPT::Dependency')} @{$srcdep->{Kids}})
        {
            my $depname = $dep->{Name};
            my $deppkg = $dep->{Package} if defined $dep->{Package};

            my ($deb_depname, $rpm_depname) = ($depname, $depname);

            # Debian naming conventions
            $deb_depname = $depname . "-progs" if ($deppkg eq "pgm");
            $deb_depname = $depname . "-doc" if ($deppkg eq "doc");
            $deb_depname = "lib$depname" . $dep->{SONAME} if ($deppkg eq "rtl");
            $deb_depname = "lib$depname" . "-dev" if ($deppkg eq "dev");
            $deb_depname = "lib$depname" . "-dev" if ($type eq "compile");
            $deb_depname =~ tr/_/-/;

            # RPM naming conventions
            $rpm_depname = $depname . "-progs" if ($deppkg eq 'pgm');
            $rpm_depname = $depname . "-doc" if ($deppkg eq 'doc');
            $rpm_depname =~ tr/_/-/;

            my $baz = (grep {$_->isa('GPT::Version')} @{$dep->{Kids}})[0];
            my $depver_element = (grep {$_->isa('GPT::Simple_Version')}
                @{$baz->{Kids}})[0];
            my $depver = $depver_element->{Major};

            $srcdeps{deb}{$type}{$deb_depname} = $depver
                unless (defined $srcdeps{deb}{$type}{$deb_depname}
                        and $srcdeps{deb}{$type}{$deb_depname} >= $depver);
            $depsuntyped{deb}{$deb_depname} = $depver
                unless (defined $depsuntyped{deb}{$deb_depname}
                        and $depsuntyped{deb}{$deb_depname} >= $depver);

            $srcdeps{rpm}{$type}{$rpm_depname} = $depver
                unless (defined $srcdeps{rpm}{$type}{$rpm_depname}
                        and $srcdeps{rpm}{$type}{$rpm_depname} >= $depver);
            $depsuntyped{rpm}{$rpm_depname} = $depver
                unless (defined $depsuntyped{rpm}{$rpm_depname}
                        and $depsuntyped{rpm}{$rpm_depname} >= $depver);
        }
    }
    my $native_name = $gptname;
    $native_name =~ tr/_/-/;

    my $soname = int($gptmajorver) - int($gptage);

    return {
        GPTFILE => $_[0],
        NAME => $gptname,
        NATIVE_NAME => $native_name,
        MAJOR => $gptmajorver,
        MINOR => $gptminorver,
        AGE => $gptage,
        SONAME => $soname,
        SRCDEPS => \%srcdeps,
        DEPSUNTYPED => \%depsuntyped
    };
}

# Fake the above for the gpt package, which has not gpt metadata
sub create_meta_for_gpt
{
    my $pkgmeta;
    my $gptver;
    my $fh;

    open($fh, "<gpt/gpt_version");
    chomp($gptver = <$fh>);
    close($fh);

    $gptver =~ m/^([0-9]+)\.([0-9]+)$/;

    $pkgmeta = {
        NAME => 'gpt',
        NATIVE_NAME => 'grid-packaging-tools',
        MAJOR => $1,
        MINOR => $2,
        AGE => 0,
        SONAME => $1,
        SRCDEPS => {},
        DEPSUNTYPED => {}
    };

    return $pkgmeta;
}

sub update_rpm($$$)
{
    my ($pkgname, $allpkgmeta, $bumprelease) = @_;
    my $pkgmeta = $allpkgmeta->{$pkgname};
    my $specfilename = "./fedora/" . $pkgname . ".spec";

    if ($verbose) {print "Acting on $specfilename \n";}

    my $version = $pkgmeta->{MAJOR} . '.' . $pkgmeta->{MINOR};

    if (!open(FH, "+< $specfilename"))
    {
        print "Error opening: $specfilename\n";
        return;
    }

    # What we'll do is modify the line array of the specfile, replacing
    # version, release, changelog, and any globus dependencies which need
    # updating
    my @ARRAY = <FH>; 
    my $index;
    my $changelogindex;
    my $releaseindex;
    my $releaseversion;
    my $setreleaseversion;
    my $releasesuffix;
    my $specfile_changed = "";
    my $version_changed = 0;

    for ($index = 0; $index < $#ARRAY; $index++)
    {
        my $specline = $ARRAY[$index];

        if ($specline =~ m/^\s*Version:\s*(\d+\.\d+)/)
        {
            if ($1 ne $version)
            {
                $ARRAY[$index] = "Version:\t$version\n";
                $setreleaseversion = 1;
                $version_changed = 1;
            }
        }
        elsif ($specline =~ m/Release:\s*(\d+)(.*)/)
        {
            $releaseindex = $index;
            $releaseversion = $1;
            $releasesuffix = $2;
        }
        elsif ($specline =~ m/\%changelog/)
        {
            $changelogindex = $index;
        }
        elsif ($specline =~ m/(Requires:\s*(\S*)\s*>=\s*)([0-9.]+)/)
        {
            # Kind of ugly here. What we do is see if the requirement package
            # name is a gpt dependency. We try some variations on the name
            # by stripping off common suffixes in the spec files. As long as
            # no gpt package names end with any of these suffixes, this should
            # work
            my $requirement = $2;
            my $requirever = $3;
            my $old_requirever = $3;
            my $base_requirement;
            my @specsuffixes = ('', '-clients', '-devel', '-libs',
                '-progs', '-server', '-setup-poll', '-setup-seg');

            $base_requirement = $requirement;
            $base_requirement =~ s/\%{\?_isa}//;

            for my $suffix (@specsuffixes)
            {
                if ($base_requirement =~ m/$suffix$/)
                {
                    my $new_base = $base_requirement;
                    $new_base =~ s/$suffix$//;

                    if (exists $pkgmeta->{DEPSUNTYPED}->{rpm}{$new_base})
                    {
                        $requirever = $pkgmeta->{DEPSUNTYPED}->{rpm}{$new_base};
                        last;
                    }
                }
            }
            if ($requirever != $old_requirever)
            {
                print "Updating version $requirement from $old_requirever to $requirever\n" if ($verbose);
                $specline =~ s/(Requires:\s*\S+\s*>=\s*)[0-9.]+/$1$requirever/;
                $ARRAY[$index] = $specline;
                $specfile_changed = 1;
            }
        }
        elsif ($specline =~ m/^Source:\s*(\S*)/ && $gtrelease)
        {
            if ($1 !~ m/$gtrelease/)
            {
                my $filename = $1;
                $filename =~ s/.*\///;
                $specline =~ s/^(Source:\s*)(\S*)(.*)/$1$gtreleaseuri$filename/;
                $ARRAY[$index] = $specline;
                $specfile_changed = 1;
            }
        }
    }

    my $changelogstring;

    if ($cvs_changelog && $gtrelease)
    {
        my ($major, $minor, $micro) = split(/\./, $gtrelease);
        $micro =~ s/rc.*//;
        my $old_tag = "globus_${major}_${minor}_" . (int($micro)-1);
        my $new_tag = "globus_${major}_${minor}_branch";

        my $changelogdir = $specfilename;
        $changelogdir = $pkgmeta->{GPTFILE};
        $changelogdir =~ s|(/pkgdata)?/pkg_data_src.gpt(.in)?||;
        chomp($changelog = `cvs -q log -N -r${old_tag}:: ${changelogdir} 2> /dev/null | grep -E '^[A-Z]+-[0-9]+'  | sort -u`);

        if ($changelog eq '')
        {
            $changelog = undef;
        }
    }

    if (!$dryrun)
    {
        if ($specfile_changed || $version_changed || $bumprelease)
        {
            if (!$changelog)
            {
                if ($changelogs{$pkgname})
                {
                    $changelogstring = "- " . join("\n- ", split(/\n/, $changelogs{$pkgname})) . "\n";
                }
                elsif ($prompt_for_changelog)
                {
                    print "Changelog entry for $pkgname [empty line to end]: ";
                    $changelogstring = '';

                    while (<>)
                    {
                        if ($_ eq "\n")
                        {
                            last;
                        }
                        $changelogstring .= "- $_";
                    }
                }

                if ($changelogstring eq '')
                {
                    $changelogstring = "- Updated version numbers\n";
                }
            }
            else
            {
                $changelogstring = "- " . join("\n- ", split(/\n/, $changelog)) . "\n";
            }
        }
    }

    if ($specfile_changed || $bumprelease)
    {
        $releaseversion++;
    }

    if ($setreleaseversion)
    {
        $releaseversion = $setreleaseversion;
    }

    if ($specfile_changed || $version_changed || $bumprelease)
    {
        $ARRAY[$changelogindex] = "%changelog\n* " . strftime('%a %b %d %Y', localtime) . " Globus Toolkit <support\@globus.org> - $version-$releaseversion\n$changelogstring\n";
        print "Spec file $specfilename has been updated\n";
    }

      $ARRAY[$releaseindex] = "Release:\t$releaseversion$releasesuffix\n";

    if (!$dryrun)
    {
        # Write back the spec file
        seek(FH,0,0) or die "Seeking: $!"; 
        print FH @ARRAY or die "Printing: $!"; 
        truncate(FH,tell(FH)) or die "Truncating: $!"; 
    }
    close(FH) or die "Closing: $!";
}

sub update_debian($$$)
{
    my ($pkgname, $allpkgmeta, $changed) = @_;
    my $pkgmeta = $allpkgmeta->{$pkgname};

    if ($verbose) {print "Acting on files in ./debian/$pkgname/debian\n";}

    my $version = "$pkgmeta->{MAJOR}.$pkgmeta->{MINOR}";

    $changed |= update_rules($pkgmeta);
    $changed |= update_control($pkgmeta, $allpkgmeta);
    $changed |= check_if_version_is_different($pkgmeta);
    $changed |= check_if_debian_metadata_changed($pkgmeta);
    update_changelog($pkgmeta) if ($changed);
}

# Things to change in a control file:
# Package names:
#    There might be a package called lib$packagename$soname which might need
#    an soname update.
# Build Dependencies: 
#    This package might have a build dependency on a package whose version has
#    changed. The name might be mangled with the addition of a suffix:
#        -admin | -dbg | -dev | -doc | -progs | -server
#    or with prefix lib and suffix -dev
# Dependencies:
#    This package might have a runtime dependence on a package whose version has
#    changed. The name might be mangled with the addition of a suffix:
#        -admin | -dbg | -dev | -doc | -progs | -server
#    or with a prefix "lib" and suffix "-dev" or a prefix "lib" and suffix
#    "$soname"
# Description:
#    The description might contain references to lib PKGNAME SONAME in its
#    auto-generated description text
sub update_control
{
    my ($pkgmeta, $allpkgmeta) = @_;
    my $controlpath = "./debian/$pkgmeta->{NATIVE_NAME}/debian/control";
    my $soname = $pkgmeta->{SONAME};
    my $changed = 0;
    my $fd;
    my @old_control;
    my $in_description = 0;

    open($fd, "<$controlpath") || return 0;
    @old_control=<$fd>;
    close($fd);

    for my $line (@old_control)
    {
        chomp($line);
        if (($in_description || $line =~ m/^Description/) && $line ne '')
        {
            my $newline;
            $in_description = 1;
            $newline = $line;
            $newline =~ s/lib$pkgmeta->{NATIVE_NAME}([0-9]+)/lib$pkgmeta->{NATIVE_NAME}$pkgmeta->{SONAME}/g;

            if ($newline ne $line)
            {
                print "changed library version in $line\n" if ($verbose);
                $changed = 1;
                $line = $newline;
            }
        }
        elsif ($in_description && $line eq '')
        {
            $in_description = '';
        }
        elsif ($line =~ /^(Package:\s*lib$pkgmeta->{NATIVE_NAME})(\d+)$/)
        {
            my ($oldname, $oldsoname) = ($1, $2);
            print "Checking if Package name line needs update ($line)\n"
                if ($verbose);
	    print "Old soname is $oldsoname, new soname is $soname\n"
                if ($verbose);
            if ($oldsoname ne '' && $soname != int($oldsoname))
            {
                $line =~s/^(Package:\s*lib$pkgmeta->{NATIVE_NAME})(\d+)$/$oldname$soname/;
                print "new line ($line)\n" if ($verbose);
                $changed = 1;
            }
        }
        elsif ($line =~ /^Build-Depends:/)
        {
            my @dependencies;

            @dependencies = split(/: |, /, $line);

            # Skip "Build-Depends: " token
            shift(@dependencies);

            for my $dep (@dependencies)
            {
                if ($dep =~ m/^(?!lib)(\S+?)(-admin|-dbg|-dev|-doc|-progs|-server)?\s*(\((.*)\))/)
                {
                    # Handle the suffix-only case
                    my ($basename, $suffix, $dependency_pred) = ($1, $2, $4);

                    # if there's a dependency on $basename and a (>= $version)
                    # associated with that dependency, update the $version
                    # part to match the GPT dependency for that package
                    if ($pkgmeta->{DEPSUNTYPED}->{deb}{$basename}
                        && $dependency_pred)
                    {
                        print "GPT dependency is for "
                            . $pkgmeta->{DEPSUNTYPED}->{deb}{$basename}
                            . "\n" if ($verbose);
                        if ($dependency_pred =~ m/>=\s*([0-9\.]+)/)
                        {
                            my $newdep;
                            $newdep = "$basename$suffix (>= "
                                . $pkgmeta->{DEPSUNTYPED}->{deb}{"$basename$suffix"}
                                . ")";

                            if ($newdep ne $dep)
                            {
                                $dep = $newdep;
                                $changed = 1;
                            }
                        }

                    }
                }
                elsif ($dep =~
                    m/^lib([a-z-]+)([0-9]+)?(-dev)(\s* \(>=\s*([0-9.]+)\))$/)
                {
                    # Handle the library case (maybe with soname and -dev
                    # suffix)
                    my ($libname, $soname, $dev, $depver) = ($1, $2, $3, $5);
                    my ($newsoname, $newdepver);
                    my ($newdep, $thischanged);
                    print "Checking if dependency on lib$libname$soname$dev "
                        . "$depver needs update\n" if ($verbose);
                    print "Depends on lib$libname$dev "
                        . $pkgmeta->{DEPSUNTYPED}->{deb}{"lib$libname$dev"}
                        . "\n" if ($verbose);

                    # If the dependency has either a soname appended to the
                    # library name or a (>= $version), compare them to 
                    # the GPT package dependency version and soname for the 
                    # package
                    $newdepver = $pkgmeta->{DEPSUNTYPED}->{deb}{"lib$libname$dev"};
                    $newsoname = $allpkgmeta->{$libname}->{SONAME};
                    if ($depver && $depver ne $newdepver)
                    {
                        $depver = $newdepver;
                        $thischanged = 1;
                    }
                    if ($soname && $soname ne $newsoname)
                    {
                        $soname = $newsoname;
                        $thischanged = 1;
                    }

                    if ($thischanged)
                    {
                        $dep = "lib$libname$soname$dev"
                            . ($depver ? " (>= $depver)" : "");
                        $changed = 1;
                    }
                }
            }
            # Combine the dependencies back into a single line
            $line = "Build-Depends: " . join(", ", @dependencies);
        }
        elsif ($line =~ m/^Depends:/)
        {
            # Depends:
            #    This package might have a runtime dependence on a package
            #    whose version has changed. The name might be mangled with the
            #    addition of a suffix:
            #        -admin | -dbg | -dev | -doc | -progs | -server
            #    or with addition of prefix + suffix
            #        lib PKGNAME -dev
            #    or with addition of prefix + suffix
            #        lib PKGNAME SONAME
            my @dependencies;

            @dependencies = split(/: |, /, $line);

            # Skip "Depends: " token
            shift(@dependencies);

            for my $dep (@dependencies)
            {
                if ($dep =~ m/^(?!lib)(\S+?)(-admin|-dbg|-dev|-doc|-progs|-server)?\s*(\((.*)\))/)
                {
                    my ($basename, $suffix, $dependency_pred) = ($1, $2, $4);

                    if ($pkgmeta->{DEPSUNTYPED}->{deb}{$basename} && $dependency_pred)
                    {
                        if ($dependency_pred =~ m/>=\s*([0-9\.]+)/)
                        {
                            my $newdep;
                            $newdep = "$basename$suffix (>= " . $pkgmeta->{DEPSUNTYPED}->{deb}{$basename}
                                . ")";

                            if ($newdep ne $dep)
                            {
                                $dep = $newdep;
                                $changed = 1;
                            }
                        }

                    }
                }
                elsif ($dep =~
                    m/^lib([a-z-]+)([0-9]+)?(-dev)?(\s* \(([<>=]+) ([^)]+)\))?$/)
                {
                    my ($basedep, $basedepsoname, $dev, $op, $depver) =
                        ($1, $2, $3, $5, $6);
                    my $newdep;
                    if ($basedep ne '')
                    {
                        if (exists $allpkgmeta->{$basedep}->{SONAME})
                        {
                            $basedepsoname = $allpkgmeta->{$basedep}->{SONAME};
                        }
                    }
                    if ($depver ne '' && $depver =~ m/[0-9.]+/)
                    {
                        $depver = $pkgmeta->{DEPSUNTYPED}->{deb}{$basedep};
                    }
                    $newdep = "lib$basedep" . ($basedepsoname ne ''?$basedepsoname:"")
                            . $dev . ($depver?" ($op $depver)" : "");
                    if ($newdep ne $dep)
                    {
                        $dep = $newdep;
                        $changed = 1;
                    }
                }
            }
            $line = "Depends: " . join(", ", @dependencies);
        }
    }
    if ($changed)
    {
        open($fd, ">$controlpath") || return 0;
        for my $line (@old_control)
        {
            print $fd "$line\n";
        }
        close($fd);
    }
    return $changed;
}

sub update_rules
{
    my ($pkgmeta) = @_;
    my ($package, $major, $minor, $age) =
        ($pkgmeta->{NATIVE_NAME}, $pkgmeta->{MAJOR}, $pkgmeta->{MINOR}, $pkgmeta->{AGE});
    my $soname = $pkgmeta->{SONAME};
    my $rulespath = "debian/$package/debian/rules";
    my $fd;
    my @oldrules;
    my $changed = 0;

    open($fd, "<$rulespath") || return $changed;
    @oldrules = <$fd>;
    close($fd);

    open($fd, ">$rulespath.new") || return $changed;

    for my $line (@oldrules)
    {
        if ($line =~ m|^soname\s*=\s*(\d+)| && $1 ne $soname)
        {
            $line =~ s|^(soname\s*=\s*)(\d+)|$1$soname|;
            $changed = 1;
        }
        elsif ($line =~ m|^version\s*=\s*([0-9\.]+)| && $1 ne "$major.$minor")
        {
            $line =~ s|^(version\s*=\s*)([0-9\.]+)|$1$major.$minor|;
            $changed = 1;
        }
        elsif ($line =~ m|^toolkit_version\s*=\s*([0-9\.rc]+)| && $1 ne $gtrelease)
        {
            $line =~ s|^(toolkit_version\s*=\s*)([0-9\.rc]+)|$1$gtrelease|;
        }
        print $fd $line;
    }

    if ($changed && !$dryrun)
    {
        print "rules file $rulespath changed\n";
        rename "$rulespath.new", $rulespath;
    }
    else
    {
        unlink "$rulespath.new";
    }

    return $changed;
}
sub check_if_version_is_different
{
    my $pkgmeta = shift;
    my $package = $pkgmeta->{NATIVE_NAME};
    my $version = "$pkgmeta->{MAJOR}.$pkgmeta->{MINOR}";
    my $old_version;
    my @oldchanges;
    my $fd;
    my $changelogpath = "debian/$package/debian/changelog";
    my $update;

    open($fd, "<$changelogpath") || return 0;
    @oldchanges = <$fd>;
    close($fd);

    if ($oldchanges[0] =~ /\S\s+\(([0-9.]*)-.*\)/)
    {
        $old_version = $1;
        if ($old_version ne $version)
        {
            return 1;
        }
    }
    return 0;
}

sub check_if_debian_metadata_changed
{
    my $pkgmeta = shift;
    my $package = $pkgmeta->{NATIVE_NAME};
    my $debianpath = "debian/$package/debian";
    my $status;

    open($status, "cvs -q status $debianpath|") || return 0;

    while (<$status>)
    {
        chomp();

        if (/^File: /) {
            if ($_ !~ /Status: Up-to-date/) {
                print "Metadata changed: $_\n" if ($verbose);
                close($status);
                return 1;
            }
        }
    }
    return 0;
}

sub update_changelog
{
    my $pkgmeta = $_[0];
    my $package = $pkgmeta->{NATIVE_NAME};
    my $version = "$pkgmeta->{MAJOR}.$pkgmeta->{MINOR}";
    my @oldchanges;
    my $fd;
    my $changelogpath = "debian/$package/debian/changelog";
    my $update;
    my $release = 1;

    open($fd, "<$changelogpath") || return 0;
    @oldchanges = <$fd>;
    close($fd);

    if ($oldchanges[0] =~ /\(([0-9\.]+)-([^)]*)\)/)
    {
        my ($oldversion, $oldrelease) = ($1, $2);

        if ($oldversion eq $version)
        {
            $release = int($oldrelease) + 1;
        }
    }

    $update = "$package ($version-$release) unstable; urgency=low\n\n";

    if ($cvs_changelog)
    {
        my ($major, $minor, $micro) = split(/\./, $gtrelease);
        $micro =~ s/rc.*//;
        my $old_tag = "globus_${major}_${minor}_" . ($micro-1);
        my $new_tag = "globus_${major}_${minor}_branch";
        
        my $changelogdir = $pkgmeta->{GPTFILE};
        $changelogdir =~ s|(/pkgdata)?/pkg_data_src.gpt(.in)?||;
        chomp($changelog = `cvs -q log -N -r${old_tag}:: ${changelogdir} 2> /dev/null | grep -E '^[A-Z]+-[0-9]+'  | sort -u`);

        if ($changelog eq '')
        {
            $changelog = "Update version for $gtrelease";
        }
    }
    elsif ($prompt_for_changelog)
    {
        print "Changelog Entry for $package [empty line to end]: ";
        $changelog = "";
        while (<>)
        {
            if ($_ eq "\n")
            {
                last;
            }
            $changelog .= "$_";
        }
    }

    for my $line (split(/\n/, $changelog))
    {
        $update .= "  * $line\n";
    }
    $update .= "\n -- Globus Toolkit <support\@globus.org>  "
            . strftime("%a, %d %b %Y %H:%M:%S %z\n\n", localtime);

    if (!$dryrun)
    {
        print "Changelog file $changelogpath has been updated\n";
        open($fd, ">$changelogpath");
        print $fd $update;
        print $fd join('', @oldchanges);
        close($fd);
    }
    return 1;
}


#MAIN
GetOptions('gptfile=s' => \$gptfile,
           'verbose' => \$verbose,
           'release=s' => \$gtrelease,
           'dryrun|n' => \$dryrun,
           'changelog=s' => \$changelog,
           'prompt-for-changelog' => \$prompt_for_changelog,
           'cvs-changelog' => \$cvs_changelog,
           'bumprelease' => \$bumprelease,
           'update' => \$update,
           'help' => \$help);

if (!defined($gtrelease))
{
    my $fh;
    open($fh, "<fait_accompli/version");
    chomp($gtrelease = <$fh>);
    close($fh);

}
Pod::Usage::pod2usage() if defined $help;

setlocale(LC_TIME, 'C');

if ($gtrelease)
{
    my ($major, $minor, $micro) = split(/\./, $gtrelease);
    my $microversion = $gtrelease;

    if ($micro =~ m/rc\d+$/)
    {
        $microversion = "testing";
    }

    if ($update)
    {
        $gtreleaseuri="http://www.globus.org/ftppub/gt$major/$major.$minor/$microversion/updates/src/";
    }
    else
    {
        $gtreleaseuri="http://www.globus.org/ftppub/gt$major/$major.$minor/$microversion/packages/src/";
    }
}

if (!(defined $gptfile))
{
    open(PKG, "etc/package-list-5.1.0");

    while ( <PKG> )
    {
        my ($pkg, $subdir, $pnb, $pkgtag) = split(' ', $_);
        next if ($pkg =~ m/^#/ || $pkg =~ m/^$/);
        #print $subdir."\n";
        next if ($pkg =~ m/openssh/);
        if (-f "source-trees/".$subdir."\/pkgdata\/pkg_data_src.gpt.in")
        {
            push(@packagelist,
                "source-trees/".$subdir."\/pkgdata\/pkg_data_src.gpt.in");
        }
        elsif (-f  "source-trees/".$subdir."\/pkgdata\/pkg_data_src.gpt")
        {
            push(@packagelist,
                "source-trees/".$subdir."\/pkgdata\/pkg_data_src.gpt");
        }
    }
}
else
{
    push(@packagelist, $gptfile);
}

# Parse the metadata into an object that contains the name, version,
# and dependencies
$gptfile =~ s!^\./!!;
$gptfile =~ s!/\./|//!!g;

my $gptpkgname = undef;
my $allpkgmeta = {};

foreach my $gptmetadata (@packagelist)
{
    my $pkgmeta = parse_package($gptmetadata);
    
    if ($gptmetadata eq $gptfile)
    {
        $gptpkgname = $pkgmeta->{NATIVE_NAME};
    }
    $allpkgmeta->{$pkgmeta->{NATIVE_NAME}} = $pkgmeta;
}

# Add another fake one for gpt
$allpkgmeta->{'grid-packaging-tools'} = create_meta_for_gpt();

# Update debian and rpm package metadata for our desired packages
if ($gptfile)
{
    update_debian($gptpkgname, $allpkgmeta, $bumprelease);
    update_rpm($gptpkgname, $allpkgmeta, $bumprelease);
}
else
{
    foreach my $pkgname (keys %$allpkgmeta)
    {
        update_debian($pkgname, $allpkgmeta, 0);
        update_rpm($pkgname, $allpkgmeta, 0);
    }
}

__END__

=head1 NAME

B<rectify-versions> - Rectify package versions from GPT metadata

=head1 SYNOPSIS

B<rectify-versions> [options] 

Options:

=over

=item B<-gptfile> filename

The package's GPT source package description file (if you want to update only one package metadata)

=item B<-verbose> 

Output info about each spec file being considered instead of just those changed.

=item B<-release> GT-RELEASE-VERSION

Update the source URL to the source directory for the GT-RELEASE-VERSION

=item B<-changelog> MESSAGE

Use MESSAGE as the changelog message, instead of the default [Updated version numbers]

=item B<-prompt-for-changelog>

Print a prompt to enter the changelog for each package that is modified

=item B<-cvs-changelog>

Use CVS logs to guess changelog value. Looks for strings that contain
a jira issue name at the beginning of the line since the last patch release
of the Globus Toolkit.

=item B<-bumprelease>

Increase the package release number and update the changelog, even if nothing
has changed in the GPT metadata.

=item B<-update>

Describe this is an update package in the default changelog entry.

=item B<-dryrun>

Print which files would be modified, but don't actually change them.
